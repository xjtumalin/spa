//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SPA.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ParStreamStagingDBEntities : DbContext
    {
        public ParStreamStagingDBEntities()
            : base("name=ParStreamStagingDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AppAssignments1> AppAssignments1 { get; set; }
        public virtual DbSet<AppAssignments3> AppAssignments3 { get; set; }
        public virtual DbSet<AppConfigAction> AppConfigActions { get; set; }
        public virtual DbSet<AppGroupConfigAction> AppGroupConfigActions { get; set; }
        public virtual DbSet<AppGroupInfoValue> AppGroupInfoValues { get; set; }
        public virtual DbSet<AppGroupSiteConfigAction> AppGroupSiteConfigActions { get; set; }
        public virtual DbSet<AppInfoValue> AppInfoValues { get; set; }
        public virtual DbSet<ApplicationGroup> ApplicationGroups { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<AppSetAssignment> AppSetAssignments { get; set; }
        public virtual DbSet<AppSetGUID> AppSetGUIDs { get; set; }
        public virtual DbSet<AppSiteConfigAction> AppSiteConfigActions { get; set; }
        public virtual DbSet<AppUsageExceptionRule> AppUsageExceptionRules { get; set; }
        public virtual DbSet<BillingPeriod> BillingPeriods { get; set; }
        public virtual DbSet<Discipline> Disciplines { get; set; }
        public virtual DbSet<Function> Functions { get; set; }
        public virtual DbSet<GBUConfigAction> GBUConfigActions { get; set; }
        public virtual DbSet<GBUInfoValue> GBUInfoValues { get; set; }
        public virtual DbSet<GBU> GBUs { get; set; }
        public virtual DbSet<GBUSysParameter> GBUSysParameters { get; set; }
        public virtual DbSet<GroupAssignments1> GroupAssignments1 { get; set; }
        public virtual DbSet<GroupAssignments3> GroupAssignments3 { get; set; }
        public virtual DbSet<JobWbsAssignments1> JobWbsAssignments1 { get; set; }
        public virtual DbSet<JobWbsAssignments2> JobWbsAssignments2 { get; set; }
        public virtual DbSet<ProjConfigAction> ProjConfigActions { get; set; }
        public virtual DbSet<ProjectInfoValue> ProjectInfoValues { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjSiteAssignment> ProjSiteAssignments { get; set; }
        public virtual DbSet<ProjSysParameter> ProjSysParameters { get; set; }
        public virtual DbSet<ReplicationSource> ReplicationSources { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RolesInFunction> RolesInFunctions { get; set; }
        public virtual DbSet<RunOnceInfo> RunOnceInfoes { get; set; }
        public virtual DbSet<SiteConfigAction> SiteConfigActions { get; set; }
        public virtual DbSet<SiteInfoValue> SiteInfoValues { get; set; }
        public virtual DbSet<SiteMap> SiteMaps { get; set; }
        public virtual DbSet<Site> Sites { get; set; }
        public virtual DbSet<SoftwarePublisher> SoftwarePublishers { get; set; }
        public virtual DbSet<Subproject> Subprojects { get; set; }
        public virtual DbSet<SystemConfigAction> SystemConfigActions { get; set; }
        public virtual DbSet<SystemInfoValue> SystemInfoValues { get; set; }
        public virtual DbSet<SystemParameter> SystemParameters { get; set; }
        public virtual DbSet<UserHistoryNet> UserHistoryNets { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<ValidationError> ValidationErrors { get; set; }
        public virtual DbSet<Entity> Entities { get; set; }
    
        [DbFunction("ParStreamStagingDBEntities", "PROJLIST")]
        public virtual IQueryable<PROJLIST_Result> PROJLIST(Nullable<int> sITEID)
        {
            var sITEIDParameter = sITEID.HasValue ?
                new ObjectParameter("SITEID", sITEID) :
                new ObjectParameter("SITEID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PROJLIST_Result>("[ParStreamStagingDBEntities].[PROJLIST](@SITEID)", sITEIDParameter);
        }
    
        public virtual ObjectResult<string> GetAppsForProjects(string siteName, string projName)
        {
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var projNameParameter = projName != null ?
                new ObjectParameter("ProjName", projName) :
                new ObjectParameter("ProjName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAppsForProjects", siteNameParameter, projNameParameter);
        }
    
        public virtual int spAccounting(string beginDate, string endDate)
        {
            var beginDateParameter = beginDate != null ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAccounting", beginDateParameter, endDateParameter);
        }
    
        public virtual int spAddAppAppgroupAssignment(Nullable<int> appId, Nullable<int> appGroupId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddAppAppgroupAssignment", appIdParameter, appGroupIdParameter);
        }
    
        public virtual int spAddAppConfigActions(Nullable<int> appID, Nullable<int> seqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddAppConfigActions", appIDParameter, seqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spAddAppGroupConfigAction(Nullable<int> appGroupID, Nullable<int> seqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddAppGroupConfigAction", appGroupIDParameter, seqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spAddAppGroupInfoValues(Nullable<int> appGroupID, string appGroupInfoName, string appGroupInfoValue, string appGroupInfoDescription, string comment)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var appGroupInfoNameParameter = appGroupInfoName != null ?
                new ObjectParameter("AppGroupInfoName", appGroupInfoName) :
                new ObjectParameter("AppGroupInfoName", typeof(string));
    
            var appGroupInfoValueParameter = appGroupInfoValue != null ?
                new ObjectParameter("AppGroupInfoValue", appGroupInfoValue) :
                new ObjectParameter("AppGroupInfoValue", typeof(string));
    
            var appGroupInfoDescriptionParameter = appGroupInfoDescription != null ?
                new ObjectParameter("AppGroupInfoDescription", appGroupInfoDescription) :
                new ObjectParameter("AppGroupInfoDescription", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddAppGroupInfoValues", appGroupIDParameter, appGroupInfoNameParameter, appGroupInfoValueParameter, appGroupInfoDescriptionParameter, commentParameter);
        }
    
        public virtual int spAddAppGroupSiteConfigAction(Nullable<int> appGroupID, Nullable<int> siteID, Nullable<int> seqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddAppGroupSiteConfigAction", appGroupIDParameter, siteIDParameter, seqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spAddAppInfoValues(Nullable<int> appID, string appInfoName, string appInfoValue, string appInfoDescription, string comment)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var appInfoNameParameter = appInfoName != null ?
                new ObjectParameter("AppInfoName", appInfoName) :
                new ObjectParameter("AppInfoName", typeof(string));
    
            var appInfoValueParameter = appInfoValue != null ?
                new ObjectParameter("AppInfoValue", appInfoValue) :
                new ObjectParameter("AppInfoValue", typeof(string));
    
            var appInfoDescriptionParameter = appInfoDescription != null ?
                new ObjectParameter("AppInfoDescription", appInfoDescription) :
                new ObjectParameter("AppInfoDescription", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddAppInfoValues", appIDParameter, appInfoNameParameter, appInfoValueParameter, appInfoDescriptionParameter, commentParameter);
        }
    
        public virtual int spAddApplication(string appAbbr, string appName, string appDescription, string appInvocation, string altAppInvocation, string appArgs, string appToMonitor, string appWorkingDir, string appVersion, Nullable<int> appType, Nullable<int> accountingLevel, string softwarePublisherID, string comment)
        {
            var appAbbrParameter = appAbbr != null ?
                new ObjectParameter("AppAbbr", appAbbr) :
                new ObjectParameter("AppAbbr", typeof(string));
    
            var appNameParameter = appName != null ?
                new ObjectParameter("AppName", appName) :
                new ObjectParameter("AppName", typeof(string));
    
            var appDescriptionParameter = appDescription != null ?
                new ObjectParameter("AppDescription", appDescription) :
                new ObjectParameter("AppDescription", typeof(string));
    
            var appInvocationParameter = appInvocation != null ?
                new ObjectParameter("AppInvocation", appInvocation) :
                new ObjectParameter("AppInvocation", typeof(string));
    
            var altAppInvocationParameter = altAppInvocation != null ?
                new ObjectParameter("AltAppInvocation", altAppInvocation) :
                new ObjectParameter("AltAppInvocation", typeof(string));
    
            var appArgsParameter = appArgs != null ?
                new ObjectParameter("AppArgs", appArgs) :
                new ObjectParameter("AppArgs", typeof(string));
    
            var appToMonitorParameter = appToMonitor != null ?
                new ObjectParameter("AppToMonitor", appToMonitor) :
                new ObjectParameter("AppToMonitor", typeof(string));
    
            var appWorkingDirParameter = appWorkingDir != null ?
                new ObjectParameter("AppWorkingDir", appWorkingDir) :
                new ObjectParameter("AppWorkingDir", typeof(string));
    
            var appVersionParameter = appVersion != null ?
                new ObjectParameter("AppVersion", appVersion) :
                new ObjectParameter("AppVersion", typeof(string));
    
            var appTypeParameter = appType.HasValue ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(int));
    
            var accountingLevelParameter = accountingLevel.HasValue ?
                new ObjectParameter("AccountingLevel", accountingLevel) :
                new ObjectParameter("AccountingLevel", typeof(int));
    
            var softwarePublisherIDParameter = softwarePublisherID != null ?
                new ObjectParameter("SoftwarePublisherID", softwarePublisherID) :
                new ObjectParameter("SoftwarePublisherID", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddApplication", appAbbrParameter, appNameParameter, appDescriptionParameter, appInvocationParameter, altAppInvocationParameter, appArgsParameter, appToMonitorParameter, appWorkingDirParameter, appVersionParameter, appTypeParameter, accountingLevelParameter, softwarePublisherIDParameter, commentParameter);
        }
    
        public virtual int spAddApplicationGroup(string appGroupAbbr, string appGroupName, string appGroupDescription, string comment)
        {
            var appGroupAbbrParameter = appGroupAbbr != null ?
                new ObjectParameter("AppGroupAbbr", appGroupAbbr) :
                new ObjectParameter("AppGroupAbbr", typeof(string));
    
            var appGroupNameParameter = appGroupName != null ?
                new ObjectParameter("AppGroupName", appGroupName) :
                new ObjectParameter("AppGroupName", typeof(string));
    
            var appGroupDescriptionParameter = appGroupDescription != null ?
                new ObjectParameter("AppGroupDescription", appGroupDescription) :
                new ObjectParameter("AppGroupDescription", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddApplicationGroup", appGroupAbbrParameter, appGroupNameParameter, appGroupDescriptionParameter, commentParameter);
        }
    
        public virtual int spAddAppProjAssignment(Nullable<int> appId, Nullable<int> projId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddAppProjAssignment", appIdParameter, projIdParameter);
        }
    
        public virtual int spAddAppSetAAssignment(Nullable<int> appId, Nullable<int> appsetId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            var appsetIdParameter = appsetId.HasValue ?
                new ObjectParameter("AppsetId", appsetId) :
                new ObjectParameter("AppsetId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddAppSetAAssignment", appIdParameter, appsetIdParameter);
        }
    
        public virtual int spAddAppSetDAssignment(Nullable<int> appId, Nullable<int> appsetId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            var appsetIdParameter = appsetId.HasValue ?
                new ObjectParameter("AppsetId", appsetId) :
                new ObjectParameter("AppsetId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddAppSetDAssignment", appIdParameter, appsetIdParameter);
        }
    
        public virtual int spAddAppSiteAssignment(Nullable<int> appId, Nullable<int> siteId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddAppSiteAssignment", appIdParameter, siteIdParameter);
        }
    
        public virtual int spAddAppSiteConfigAction(Nullable<int> appID, Nullable<int> siteID, Nullable<int> seqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddAppSiteConfigAction", appIDParameter, siteIDParameter, seqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spAddDiscipline(string discAbbr, string costCode, string discName, string discDescription, string discDirname)
        {
            var discAbbrParameter = discAbbr != null ?
                new ObjectParameter("DiscAbbr", discAbbr) :
                new ObjectParameter("DiscAbbr", typeof(string));
    
            var costCodeParameter = costCode != null ?
                new ObjectParameter("CostCode", costCode) :
                new ObjectParameter("CostCode", typeof(string));
    
            var discNameParameter = discName != null ?
                new ObjectParameter("DiscName", discName) :
                new ObjectParameter("DiscName", typeof(string));
    
            var discDescriptionParameter = discDescription != null ?
                new ObjectParameter("DiscDescription", discDescription) :
                new ObjectParameter("DiscDescription", typeof(string));
    
            var discDirnameParameter = discDirname != null ?
                new ObjectParameter("DiscDirname", discDirname) :
                new ObjectParameter("DiscDirname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddDiscipline", discAbbrParameter, costCodeParameter, discNameParameter, discDescriptionParameter, discDirnameParameter);
        }
    
        public virtual int spAddFunction(string description)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddFunction", descriptionParameter);
        }
    
        public virtual int spAddGBUConfigAction(Nullable<int> gBUID, Nullable<int> seqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddGBUConfigAction", gBUIDParameter, seqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spAddGBUInfoValues(Nullable<int> gBUID, string gBUInfoName, string gBUInfoValue, string gBUInfoDescription, string comment)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var gBUInfoNameParameter = gBUInfoName != null ?
                new ObjectParameter("GBUInfoName", gBUInfoName) :
                new ObjectParameter("GBUInfoName", typeof(string));
    
            var gBUInfoValueParameter = gBUInfoValue != null ?
                new ObjectParameter("GBUInfoValue", gBUInfoValue) :
                new ObjectParameter("GBUInfoValue", typeof(string));
    
            var gBUInfoDescriptionParameter = gBUInfoDescription != null ?
                new ObjectParameter("GBUInfoDescription", gBUInfoDescription) :
                new ObjectParameter("GBUInfoDescription", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddGBUInfoValues", gBUIDParameter, gBUInfoNameParameter, gBUInfoValueParameter, gBUInfoDescriptionParameter, commentParameter);
        }
    
        public virtual int spAddGBUS(string gBUAbbr, string gBUName, string comment)
        {
            var gBUAbbrParameter = gBUAbbr != null ?
                new ObjectParameter("GBUAbbr", gBUAbbr) :
                new ObjectParameter("GBUAbbr", typeof(string));
    
            var gBUNameParameter = gBUName != null ?
                new ObjectParameter("GBUName", gBUName) :
                new ObjectParameter("GBUName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddGBUS", gBUAbbrParameter, gBUNameParameter, commentParameter);
        }
    
        public virtual int spAddGBUSysParameters(Nullable<int> gBUID, string parameterName, string parameterValue, string description)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            var parameterValueParameter = parameterValue != null ?
                new ObjectParameter("ParameterValue", parameterValue) :
                new ObjectParameter("ParameterValue", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddGBUSysParameters", gBUIDParameter, parameterNameParameter, parameterValueParameter, descriptionParameter);
        }
    
        public virtual int spAddProjAppGroupAssignment(Nullable<int> projId, Nullable<int> appGroupId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProjAppGroupAssignment", projIdParameter, appGroupIdParameter);
        }
    
        public virtual int spAddProjConfigAction(Nullable<int> projID, Nullable<int> seqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProjConfigAction", projIDParameter, seqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spAddProjDiscAppAssignment(Nullable<int> projId, Nullable<int> discId, Nullable<int> appId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProjDiscAppAssignment", projIdParameter, discIdParameter, appIdParameter);
        }
    
        public virtual int spAddProjDiscAppGroupAssignment(Nullable<int> projId, Nullable<int> discId, Nullable<int> appGroupId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProjDiscAppGroupAssignment", projIdParameter, discIdParameter, appGroupIdParameter);
        }
    
        public virtual int spAddProjDiscAssignment(Nullable<int> projId, Nullable<int> discId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProjDiscAssignment", projIdParameter, discIdParameter);
        }
    
        public virtual int spAddProject(string projAbbr, string projName, string projDescription, Nullable<int> gBUId, string comment)
        {
            var projAbbrParameter = projAbbr != null ?
                new ObjectParameter("ProjAbbr", projAbbr) :
                new ObjectParameter("ProjAbbr", typeof(string));
    
            var projNameParameter = projName != null ?
                new ObjectParameter("ProjName", projName) :
                new ObjectParameter("ProjName", typeof(string));
    
            var projDescriptionParameter = projDescription != null ?
                new ObjectParameter("ProjDescription", projDescription) :
                new ObjectParameter("ProjDescription", typeof(string));
    
            var gBUIdParameter = gBUId.HasValue ?
                new ObjectParameter("GBUId", gBUId) :
                new ObjectParameter("GBUId", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProject", projAbbrParameter, projNameParameter, projDescriptionParameter, gBUIdParameter, commentParameter);
        }
    
        public virtual int spAddProjectInfoValues(Nullable<int> projID, string projInfoName, string projInfoValue, string projInfoDescription, string comment)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var projInfoNameParameter = projInfoName != null ?
                new ObjectParameter("ProjInfoName", projInfoName) :
                new ObjectParameter("ProjInfoName", typeof(string));
    
            var projInfoValueParameter = projInfoValue != null ?
                new ObjectParameter("ProjInfoValue", projInfoValue) :
                new ObjectParameter("ProjInfoValue", typeof(string));
    
            var projInfoDescriptionParameter = projInfoDescription != null ?
                new ObjectParameter("ProjInfoDescription", projInfoDescription) :
                new ObjectParameter("ProjInfoDescription", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProjectInfoValues", projIDParameter, projInfoNameParameter, projInfoValueParameter, projInfoDescriptionParameter, commentParameter);
        }
    
        public virtual int spAddProjectJobWBS(Nullable<int> iD, string job, string wBS, string jobDescription)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var wBSParameter = wBS != null ?
                new ObjectParameter("WBS", wBS) :
                new ObjectParameter("WBS", typeof(string));
    
            var jobDescriptionParameter = jobDescription != null ?
                new ObjectParameter("JobDescription", jobDescription) :
                new ObjectParameter("JobDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProjectJobWBS", iDParameter, jobParameter, wBSParameter, jobDescriptionParameter);
        }
    
        public virtual int spAddProjSiteAssignment(Nullable<int> projID, Nullable<int> siteID, string projDirname, string projDrive, string servername, string sharename, Nullable<bool> sharedAtProjDir, Nullable<int> cmpyStdID, string cmpyStdDrive, string projLinkPath, string projGEDir)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var projDirnameParameter = projDirname != null ?
                new ObjectParameter("ProjDirname", projDirname) :
                new ObjectParameter("ProjDirname", typeof(string));
    
            var projDriveParameter = projDrive != null ?
                new ObjectParameter("ProjDrive", projDrive) :
                new ObjectParameter("ProjDrive", typeof(string));
    
            var servernameParameter = servername != null ?
                new ObjectParameter("Servername", servername) :
                new ObjectParameter("Servername", typeof(string));
    
            var sharenameParameter = sharename != null ?
                new ObjectParameter("Sharename", sharename) :
                new ObjectParameter("Sharename", typeof(string));
    
            var sharedAtProjDirParameter = sharedAtProjDir.HasValue ?
                new ObjectParameter("SharedAtProjDir", sharedAtProjDir) :
                new ObjectParameter("SharedAtProjDir", typeof(bool));
    
            var cmpyStdIDParameter = cmpyStdID.HasValue ?
                new ObjectParameter("CmpyStdID", cmpyStdID) :
                new ObjectParameter("CmpyStdID", typeof(int));
    
            var cmpyStdDriveParameter = cmpyStdDrive != null ?
                new ObjectParameter("CmpyStdDrive", cmpyStdDrive) :
                new ObjectParameter("CmpyStdDrive", typeof(string));
    
            var projLinkPathParameter = projLinkPath != null ?
                new ObjectParameter("ProjLinkPath", projLinkPath) :
                new ObjectParameter("ProjLinkPath", typeof(string));
    
            var projGEDirParameter = projGEDir != null ?
                new ObjectParameter("ProjGEDir", projGEDir) :
                new ObjectParameter("ProjGEDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProjSiteAssignment", projIDParameter, siteIDParameter, projDirnameParameter, projDriveParameter, servernameParameter, sharenameParameter, sharedAtProjDirParameter, cmpyStdIDParameter, cmpyStdDriveParameter, projLinkPathParameter, projGEDirParameter);
        }
    
        public virtual int spAddProjSubProjAssignment(Nullable<int> projId, Nullable<int> subProjId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var subProjIdParameter = subProjId.HasValue ?
                new ObjectParameter("SubProjId", subProjId) :
                new ObjectParameter("SubProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProjSubProjAssignment", projIdParameter, subProjIdParameter);
        }
    
        public virtual int spAddProjSysParameters(Nullable<int> projID, string parameterName, string parameterValue, string description)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            var parameterValueParameter = parameterValue != null ?
                new ObjectParameter("ParameterValue", parameterValue) :
                new ObjectParameter("ParameterValue", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddProjSysParameters", projIDParameter, parameterNameParameter, parameterValueParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAddReplicationSource(Nullable<int> siteID, Nullable<int> projID, Nullable<int> subpID, Nullable<int> discID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAddReplicationSource", siteIDParameter, projIDParameter, subpIDParameter, discIDParameter);
        }
    
        public virtual int spAddRole(string description)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddRole", descriptionParameter);
        }
    
        public virtual int spAddRolesToFunctions(Nullable<int> functionID, Nullable<int> roleID, Nullable<int> entityID, string entityType)
        {
            var functionIDParameter = functionID.HasValue ?
                new ObjectParameter("FunctionID", functionID) :
                new ObjectParameter("FunctionID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var entityTypeParameter = entityType != null ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddRolesToFunctions", functionIDParameter, roleIDParameter, entityIDParameter, entityTypeParameter);
        }
    
        public virtual int spAddSet(string gUID, string appsetName)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            var appsetNameParameter = appsetName != null ?
                new ObjectParameter("AppsetName", appsetName) :
                new ObjectParameter("AppsetName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSet", gUIDParameter, appsetNameParameter);
        }
    
        public virtual int spAddSite(string siteAbbr, string siteName, string siteDescription, string edeDrive, string edeFileServername, string edeFileServerSharename, Nullable<int> gBUID, string comment)
        {
            var siteAbbrParameter = siteAbbr != null ?
                new ObjectParameter("SiteAbbr", siteAbbr) :
                new ObjectParameter("SiteAbbr", typeof(string));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var siteDescriptionParameter = siteDescription != null ?
                new ObjectParameter("SiteDescription", siteDescription) :
                new ObjectParameter("SiteDescription", typeof(string));
    
            var edeDriveParameter = edeDrive != null ?
                new ObjectParameter("EdeDrive", edeDrive) :
                new ObjectParameter("EdeDrive", typeof(string));
    
            var edeFileServernameParameter = edeFileServername != null ?
                new ObjectParameter("EdeFileServername", edeFileServername) :
                new ObjectParameter("EdeFileServername", typeof(string));
    
            var edeFileServerSharenameParameter = edeFileServerSharename != null ?
                new ObjectParameter("EdeFileServerSharename", edeFileServerSharename) :
                new ObjectParameter("EdeFileServerSharename", typeof(string));
    
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSite", siteAbbrParameter, siteNameParameter, siteDescriptionParameter, edeDriveParameter, edeFileServernameParameter, edeFileServerSharenameParameter, gBUIDParameter, commentParameter);
        }
    
        public virtual int spAddSiteAppGroupAssignment(Nullable<int> appGroupId, Nullable<int> siteId)
        {
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSiteAppGroupAssignment", appGroupIdParameter, siteIdParameter);
        }
    
        public virtual int spAddSiteConfigAction(Nullable<int> siteID, Nullable<int> seqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSiteConfigAction", siteIDParameter, seqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spAddSiteInfoValues(Nullable<int> siteID, string siteInfoName, string siteInfoValue, string siteInfoDescription, string comment)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var siteInfoNameParameter = siteInfoName != null ?
                new ObjectParameter("SiteInfoName", siteInfoName) :
                new ObjectParameter("SiteInfoName", typeof(string));
    
            var siteInfoValueParameter = siteInfoValue != null ?
                new ObjectParameter("SiteInfoValue", siteInfoValue) :
                new ObjectParameter("SiteInfoValue", typeof(string));
    
            var siteInfoDescriptionParameter = siteInfoDescription != null ?
                new ObjectParameter("SiteInfoDescription", siteInfoDescription) :
                new ObjectParameter("SiteInfoDescription", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSiteInfoValues", siteIDParameter, siteInfoNameParameter, siteInfoValueParameter, siteInfoDescriptionParameter, commentParameter);
        }
    
        public virtual int spAddSiteJobWBS(Nullable<int> iD, string job, string wBS, string jobDescription)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var wBSParameter = wBS != null ?
                new ObjectParameter("WBS", wBS) :
                new ObjectParameter("WBS", typeof(string));
    
            var jobDescriptionParameter = jobDescription != null ?
                new ObjectParameter("JobDescription", jobDescription) :
                new ObjectParameter("JobDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSiteJobWBS", iDParameter, jobParameter, wBSParameter, jobDescriptionParameter);
        }
    
        public virtual int spAddSiteProjAssignment(Nullable<int> projId, Nullable<int> siteId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSiteProjAssignment", projIdParameter, siteIdParameter);
        }
    
        public virtual int spAddSoftwarePublisher(string softwarePublisherName, string comment)
        {
            var softwarePublisherNameParameter = softwarePublisherName != null ?
                new ObjectParameter("SoftwarePublisherName", softwarePublisherName) :
                new ObjectParameter("SoftwarePublisherName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSoftwarePublisher", softwarePublisherNameParameter, commentParameter);
        }
    
        public virtual int spAddSubProjAppAssignment(Nullable<int> subpId, Nullable<int> appId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSubProjAppAssignment", subpIdParameter, appIdParameter);
        }
    
        public virtual int spAddSubProjAppGroupAssignment(Nullable<int> subpId, Nullable<int> appGroupId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSubProjAppGroupAssignment", subpIdParameter, appGroupIdParameter);
        }
    
        public virtual int spAddSubProjDiscAppAssignment(Nullable<int> subpId, Nullable<int> discId, Nullable<int> appId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSubProjDiscAppAssignment", subpIdParameter, discIdParameter, appIdParameter);
        }
    
        public virtual int spAddSubProjDiscAppGroupAssignment(Nullable<int> subpId, Nullable<int> discId, Nullable<int> appGroupId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSubProjDiscAppGroupAssignment", subpIdParameter, discIdParameter, appGroupIdParameter);
        }
    
        public virtual int spAddSubProjDiscAssignment(Nullable<int> subpId, Nullable<int> discId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSubProjDiscAssignment", subpIdParameter, discIdParameter);
        }
    
        public virtual int spAddSubProject(string abbr, string name, string description, string dirName, string parentId, string linkPath, Nullable<int> projId, string comment)
        {
            var abbrParameter = abbr != null ?
                new ObjectParameter("Abbr", abbr) :
                new ObjectParameter("Abbr", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dirNameParameter = dirName != null ?
                new ObjectParameter("DirName", dirName) :
                new ObjectParameter("DirName", typeof(string));
    
            var parentIdParameter = parentId != null ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(string));
    
            var linkPathParameter = linkPath != null ?
                new ObjectParameter("LinkPath", linkPath) :
                new ObjectParameter("LinkPath", typeof(string));
    
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSubProject", abbrParameter, nameParameter, descriptionParameter, dirNameParameter, parentIdParameter, linkPathParameter, projIdParameter, commentParameter);
        }
    
        public virtual int spAddSystemConfigAction(Nullable<int> seqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSystemConfigAction", seqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spAddSystemInfoValues(string systemInfoName, string systemInfoValue, string systemInfoDescription, string comment)
        {
            var systemInfoNameParameter = systemInfoName != null ?
                new ObjectParameter("SystemInfoName", systemInfoName) :
                new ObjectParameter("SystemInfoName", typeof(string));
    
            var systemInfoValueParameter = systemInfoValue != null ?
                new ObjectParameter("SystemInfoValue", systemInfoValue) :
                new ObjectParameter("SystemInfoValue", typeof(string));
    
            var systemInfoDescriptionParameter = systemInfoDescription != null ?
                new ObjectParameter("SystemInfoDescription", systemInfoDescription) :
                new ObjectParameter("SystemInfoDescription", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSystemInfoValues", systemInfoNameParameter, systemInfoValueParameter, systemInfoDescriptionParameter, commentParameter);
        }
    
        public virtual int spAddSystemParameters(string parameterName, string parameterValue, string description)
        {
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            var parameterValueParameter = parameterValue != null ?
                new ObjectParameter("ParameterValue", parameterValue) :
                new ObjectParameter("ParameterValue", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddSystemParameters", parameterNameParameter, parameterValueParameter, descriptionParameter);
        }
    
        public virtual int spAddUser(string userName, string userId)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddUser", userNameParameter, userIdParameter);
        }
    
        public virtual int spAddUsersToRoles(string userID, Nullable<int> roleID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddUsersToRoles", userIDParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<spAppAssign1_Result> spAppAssign1(Nullable<int> subpID, Nullable<int> discID)
        {
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppAssign1_Result>("spAppAssign1", subpIDParameter, discIDParameter);
        }
    
        public virtual ObjectResult<spAppAssign2_Result> spAppAssign2(Nullable<int> subpID)
        {
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppAssign2_Result>("spAppAssign2", subpIDParameter);
        }
    
        public virtual ObjectResult<spAppAssign3_Result> spAppAssign3(Nullable<int> projID, Nullable<int> discID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppAssign3_Result>("spAppAssign3", projIDParameter, discIDParameter);
        }
    
        public virtual ObjectResult<spAppAssign4_Result> spAppAssign4(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppAssign4_Result>("spAppAssign4", projIDParameter);
        }
    
        public virtual int spAppAssignments(Nullable<int> projID, Nullable<int> subpID, Nullable<int> discID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAppAssignments", projIDParameter, subpIDParameter, discIDParameter);
        }
    
        public virtual ObjectResult<spAppAssignments1_Result> spAppAssignments1(Nullable<int> projID, Nullable<int> subpID, Nullable<int> discID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppAssignments1_Result>("spAppAssignments1", projIDParameter, subpIDParameter, discIDParameter);
        }
    
        public virtual ObjectResult<spAppAssignments2_Result> spAppAssignments2(Nullable<int> projID, Nullable<int> subpID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppAssignments2_Result>("spAppAssignments2", projIDParameter, subpIDParameter);
        }
    
        public virtual ObjectResult<spAppAssignments3_Result> spAppAssignments3(Nullable<int> projID, Nullable<int> discID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppAssignments3_Result>("spAppAssignments3", projIDParameter, discIDParameter);
        }
    
        public virtual ObjectResult<spAppAssignments4_Result> spAppAssignments4(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppAssignments4_Result>("spAppAssignments4", siteIDParameter);
        }
    
        public virtual int spAppConcurrentUsage(Nullable<int> appID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAppConcurrentUsage", appIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int spAppConcurrentUsage2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAppConcurrentUsage2");
        }
    
        public virtual ObjectResult<spAppConfigActions_Result> spAppConfigActions(Nullable<int> appID, string execType)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppConfigActions_Result>("spAppConfigActions", appIDParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAppGroupAssign1(Nullable<int> subpID, Nullable<int> discID)
        {
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAppGroupAssign1", subpIDParameter, discIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAppGroupAssign2(Nullable<int> subpID)
        {
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAppGroupAssign2", subpIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAppGroupAssign3(Nullable<int> projID, Nullable<int> discID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAppGroupAssign3", projIDParameter, discIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAppGroupAssign4(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAppGroupAssign4", projIDParameter);
        }
    
        public virtual ObjectResult<spAppGroupConfigActions_Result> spAppGroupConfigActions(Nullable<int> appGroupID, string execType)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppGroupConfigActions_Result>("spAppGroupConfigActions", appGroupIDParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<spAppGroupInfo_Result> spAppGroupInfo(Nullable<int> appGroupID, Nullable<int> appID)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppGroupInfo_Result>("spAppGroupInfo", appGroupIDParameter, appIDParameter);
        }
    
        public virtual ObjectResult<spAppGroupInfo2_Result> spAppGroupInfo2(Nullable<int> appGroupID)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppGroupInfo2_Result>("spAppGroupInfo2", appGroupIDParameter);
        }
    
        public virtual ObjectResult<spAppGroupInfoValues_Result> spAppGroupInfoValues(Nullable<int> appGroupID)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppGroupInfoValues_Result>("spAppGroupInfoValues", appGroupIDParameter);
        }
    
        public virtual ObjectResult<spAppGroupSiteConfigActions_Result> spAppGroupSiteConfigActions(Nullable<int> appGroupID, Nullable<int> siteID, string execType)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppGroupSiteConfigActions_Result>("spAppGroupSiteConfigActions", appGroupIDParameter, siteIDParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<spAppGUID_Result> spAppGUID(Nullable<int> appID, Nullable<bool> operCode)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var operCodeParameter = operCode.HasValue ?
                new ObjectParameter("OperCode", operCode) :
                new ObjectParameter("OperCode", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppGUID_Result>("spAppGUID", appIDParameter, operCodeParameter);
        }
    
        public virtual ObjectResult<spAppGUIDActDeactList_Result> spAppGUIDActDeactList(Nullable<int> appID, string opt)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var optParameter = opt != null ?
                new ObjectParameter("Opt", opt) :
                new ObjectParameter("Opt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppGUIDActDeactList_Result>("spAppGUIDActDeactList", appIDParameter, optParameter);
        }
    
        public virtual ObjectResult<spAppInfo_Result> spAppInfo(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppInfo_Result>("spAppInfo", appIDParameter);
        }
    
        public virtual ObjectResult<spAppInfo2_Result> spAppInfo2(Nullable<int> appID, string appAbbr)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var appAbbrParameter = appAbbr != null ?
                new ObjectParameter("AppAbbr", appAbbr) :
                new ObjectParameter("AppAbbr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppInfo2_Result>("spAppInfo2", appIDParameter, appAbbrParameter);
        }
    
        public virtual ObjectResult<spAppInfoMenu_Result> spAppInfoMenu(Nullable<int> appType)
        {
            var appTypeParameter = appType.HasValue ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppInfoMenu_Result>("spAppInfoMenu", appTypeParameter);
        }
    
        public virtual ObjectResult<spAppInfoValues_Result> spAppInfoValues(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppInfoValues_Result>("spAppInfoValues", appIDParameter);
        }
    
        public virtual ObjectResult<spAppInvocation_Result> spAppInvocation(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppInvocation_Result>("spAppInvocation", appIDParameter);
        }
    
        public virtual ObjectResult<spApplications_Result> spApplications(Nullable<int> appID, string appAbbr)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var appAbbrParameter = appAbbr != null ?
                new ObjectParameter("AppAbbr", appAbbr) :
                new ObjectParameter("AppAbbr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spApplications_Result>("spApplications", appIDParameter, appAbbrParameter);
        }
    
        public virtual ObjectResult<spAppsetAssignments_Result> spAppsetAssignments(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppsetAssignments_Result>("spAppsetAssignments", appIDParameter);
        }
    
        public virtual ObjectResult<spAppSiteConfigActions_Result> spAppSiteConfigActions(Nullable<int> appID, Nullable<int> siteID, string execType)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAppSiteConfigActions_Result>("spAppSiteConfigActions", appIDParameter, siteIDParameter, execTypeParameter);
        }
    
        public virtual int spAppUsage(Nullable<System.DateTime> curDate)
        {
            var curDateParameter = curDate.HasValue ?
                new ObjectParameter("curDate", curDate) :
                new ObjectParameter("curDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAppUsage", curDateParameter);
        }
    
        public virtual int spAppUsage2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAppUsage2");
        }
    
        public virtual int spAppUsageCountPerDay(Nullable<int> appID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAppUsageCountPerDay", appIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int spAppUsageRaw()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAppUsageRaw");
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> spBillingPeriod()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("spBillingPeriod");
        }
    
        public virtual ObjectResult<spCopyProjConfigAction_Result> spCopyProjConfigAction(Nullable<int> projID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCopyProjConfigAction_Result>("spCopyProjConfigAction", projIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual int spDeactivateAppUsageExceptionRule(string userID, string workstation, string application)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var workstationParameter = workstation != null ?
                new ObjectParameter("Workstation", workstation) :
                new ObjectParameter("Workstation", typeof(string));
    
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeactivateAppUsageExceptionRule", userIDParameter, workstationParameter, applicationParameter);
        }
    
        public virtual int spDeleteAppAppgroupAssignments(Nullable<int> appID, Nullable<int> appGroupID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAppAppgroupAssignments", appIDParameter, appGroupIDParameter);
        }
    
        public virtual int spDeleteAppConfigActions(Nullable<int> appID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAppConfigActions", appIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual int spDeleteAppGroupConfigAction(Nullable<int> appGroupID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAppGroupConfigAction", appGroupIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual int spDeleteAppGroupInfoValues(Nullable<int> appGroupID, string appGroupInfoName)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var appGroupInfoNameParameter = appGroupInfoName != null ?
                new ObjectParameter("AppGroupInfoName", appGroupInfoName) :
                new ObjectParameter("AppGroupInfoName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAppGroupInfoValues", appGroupIDParameter, appGroupInfoNameParameter);
        }
    
        public virtual int spDeleteAppGroupSiteAssignment(Nullable<int> appGroupID, Nullable<int> siteID)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAppGroupSiteAssignment", appGroupIDParameter, siteIDParameter);
        }
    
        public virtual int spDeleteAppGroupSiteConfigAction(Nullable<int> appGroupID, Nullable<int> siteID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAppGroupSiteConfigAction", appGroupIDParameter, siteIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual int spDeleteAppInfoValues(Nullable<int> appID, string appInfoName)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var appInfoNameParameter = appInfoName != null ?
                new ObjectParameter("AppInfoName", appInfoName) :
                new ObjectParameter("AppInfoName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAppInfoValues", appIDParameter, appInfoNameParameter);
        }
    
        public virtual int spDeleteApplication(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteApplication", appIDParameter);
        }
    
        public virtual int spDeleteApplicationGroup(Nullable<int> appGroupId)
        {
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteApplicationGroup", appGroupIdParameter);
        }
    
        public virtual int spDeleteAppProjAssignments(Nullable<int> appID, Nullable<int> projID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAppProjAssignments", appIDParameter, projIDParameter);
        }
    
        public virtual int spDeleteAppProjDisAssignments(Nullable<int> appID, Nullable<int> siteID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAppProjDisAssignments", appIDParameter, siteIDParameter);
        }
    
        public virtual int spDeleteAppset(Nullable<int> appsetID)
        {
            var appsetIDParameter = appsetID.HasValue ?
                new ObjectParameter("AppsetID", appsetID) :
                new ObjectParameter("AppsetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAppset", appsetIDParameter);
        }
    
        public virtual int spDeleteAppSetAssignments(Nullable<int> appID, Nullable<int> appsetID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var appsetIDParameter = appsetID.HasValue ?
                new ObjectParameter("AppsetID", appsetID) :
                new ObjectParameter("AppsetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAppSetAssignments", appIDParameter, appsetIDParameter);
        }
    
        public virtual int spDeleteAppSiteAssignments(Nullable<int> appID, Nullable<int> siteID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAppSiteAssignments", appIDParameter, siteIDParameter);
        }
    
        public virtual int spDeleteAppSiteConfigAction(Nullable<int> appID, Nullable<int> siteID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAppSiteConfigAction", appIDParameter, siteIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual int spDeleteAppSubprojAssignments(Nullable<int> appID, Nullable<int> subpID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAppSubprojAssignments", appIDParameter, subpIDParameter);
        }
    
        public virtual int spDeleteDiscipline(Nullable<int> discID)
        {
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteDiscipline", discIDParameter);
        }
    
        public virtual int spDeleteFunction(Nullable<int> functionID)
        {
            var functionIDParameter = functionID.HasValue ?
                new ObjectParameter("FunctionID", functionID) :
                new ObjectParameter("FunctionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteFunction", functionIDParameter);
        }
    
        public virtual int spDeleteGBUConfigActions(Nullable<int> gBUID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteGBUConfigActions", gBUIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual int spDeleteGBUInfoValues(Nullable<int> gBUID, string gBUInfoName)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var gBUInfoNameParameter = gBUInfoName != null ?
                new ObjectParameter("GBUInfoName", gBUInfoName) :
                new ObjectParameter("GBUInfoName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteGBUInfoValues", gBUIDParameter, gBUInfoNameParameter);
        }
    
        public virtual int spDeleteGBUS(Nullable<int> gBUID)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteGBUS", gBUIDParameter);
        }
    
        public virtual int spDeleteGBUSysParameters(Nullable<int> gBUID, string parameterName)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteGBUSysParameters", gBUIDParameter, parameterNameParameter);
        }
    
        public virtual int spDeleteProjAppGroupAssignment(Nullable<int> projId, Nullable<int> appGroupId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProjAppGroupAssignment", projIdParameter, appGroupIdParameter);
        }
    
        public virtual int spDeleteProjConfigAction(Nullable<int> projID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProjConfigAction", projIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual int spDeleteProjDiscAppAssignment(Nullable<int> projId, Nullable<int> discId, Nullable<int> appId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProjDiscAppAssignment", projIdParameter, discIdParameter, appIdParameter);
        }
    
        public virtual int spDeleteProjDiscAppGroupAssignment(Nullable<int> projId, Nullable<int> discId, Nullable<int> appGroupId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProjDiscAppGroupAssignment", projIdParameter, discIdParameter, appGroupIdParameter);
        }
    
        public virtual int spDeleteProjDiscAssignment(Nullable<int> projId, Nullable<int> discId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProjDiscAssignment", projIdParameter, discIdParameter);
        }
    
        public virtual int spDeleteProject(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProject", projIdParameter);
        }
    
        public virtual int spDeleteProjectInfoValues(Nullable<int> projID, string projInfoName)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var projInfoNameParameter = projInfoName != null ?
                new ObjectParameter("ProjInfoName", projInfoName) :
                new ObjectParameter("ProjInfoName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProjectInfoValues", projIDParameter, projInfoNameParameter);
        }
    
        public virtual int spDeleteProjectJobWbs(Nullable<int> iD, string job, string wBS)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var wBSParameter = wBS != null ?
                new ObjectParameter("WBS", wBS) :
                new ObjectParameter("WBS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProjectJobWbs", iDParameter, jobParameter, wBSParameter);
        }
    
        public virtual int spDeleteProjSiteAssignment(Nullable<int> projID, Nullable<int> siteID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProjSiteAssignment", projIDParameter, siteIDParameter);
        }
    
        public virtual int spDeleteProjSysParameters(Nullable<int> projID, string parameterName)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteProjSysParameters", projIDParameter, parameterNameParameter);
        }
    
        public virtual int spDeleteRole(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteRole", roleIDParameter);
        }
    
        public virtual int spDeleteRunOnceInfo(string userID, string workStation)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var workStationParameter = workStation != null ?
                new ObjectParameter("WorkStation", workStation) :
                new ObjectParameter("WorkStation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteRunOnceInfo", userIDParameter, workStationParameter);
        }
    
        public virtual int spDeleteRunOnceInfo_Admin(string userID, string workStation, string commandOrMessage)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var workStationParameter = workStation != null ?
                new ObjectParameter("WorkStation", workStation) :
                new ObjectParameter("WorkStation", typeof(string));
    
            var commandOrMessageParameter = commandOrMessage != null ?
                new ObjectParameter("CommandOrMessage", commandOrMessage) :
                new ObjectParameter("CommandOrMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteRunOnceInfo_Admin", userIDParameter, workStationParameter, commandOrMessageParameter);
        }
    
        public virtual int spDeleteSite(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSite", siteIDParameter);
        }
    
        public virtual int spDeleteSiteConfigAction(Nullable<int> siteID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSiteConfigAction", siteIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual int spDeleteSiteInfoValues(Nullable<int> siteID, string siteInfoName)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var siteInfoNameParameter = siteInfoName != null ?
                new ObjectParameter("SiteInfoName", siteInfoName) :
                new ObjectParameter("SiteInfoName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSiteInfoValues", siteIDParameter, siteInfoNameParameter);
        }
    
        public virtual int spDeleteSiteJobWbs(Nullable<int> iD, string job, string wBS)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var wBSParameter = wBS != null ?
                new ObjectParameter("WBS", wBS) :
                new ObjectParameter("WBS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSiteJobWbs", iDParameter, jobParameter, wBSParameter);
        }
    
        public virtual int spDeleteSoftwarePublisher(Nullable<int> softwarePublisherID)
        {
            var softwarePublisherIDParameter = softwarePublisherID.HasValue ?
                new ObjectParameter("SoftwarePublisherID", softwarePublisherID) :
                new ObjectParameter("SoftwarePublisherID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSoftwarePublisher", softwarePublisherIDParameter);
        }
    
        public virtual int spDeleteSubProjAppAssignment(Nullable<int> subpId, Nullable<int> appId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSubProjAppAssignment", subpIdParameter, appIdParameter);
        }
    
        public virtual int spDeleteSubProjAppGroupAssignment(Nullable<int> subpId, Nullable<int> appGroupId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSubProjAppGroupAssignment", subpIdParameter, appGroupIdParameter);
        }
    
        public virtual int spDeleteSubProjDiscAppAssignment(Nullable<int> subpId, Nullable<int> discId, Nullable<int> appId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSubProjDiscAppAssignment", subpIdParameter, discIdParameter, appIdParameter);
        }
    
        public virtual int spDeleteSubProjDiscAppGroupAssignment(Nullable<int> subpId, Nullable<int> discId, Nullable<int> appGroupId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSubProjDiscAppGroupAssignment", subpIdParameter, discIdParameter, appGroupIdParameter);
        }
    
        public virtual int spDeleteSubProjDiscAssignment(Nullable<int> subpId, Nullable<int> discId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSubProjDiscAssignment", subpIdParameter, discIdParameter);
        }
    
        public virtual int spDeleteSubProject(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSubProject", idParameter);
        }
    
        public virtual int spDeleteSysParameters(string parameterName)
        {
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSysParameters", parameterNameParameter);
        }
    
        public virtual int spDeleteSystemConfigAction(string parameterName, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSystemConfigAction", parameterNameParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual int spDeleteSystemInfoValues(string systemInfoName)
        {
            var systemInfoNameParameter = systemInfoName != null ?
                new ObjectParameter("SystemInfoName", systemInfoName) :
                new ObjectParameter("SystemInfoName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteSystemInfoValues", systemInfoNameParameter);
        }
    
        public virtual int spDeleteUser(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteUser", userIDParameter);
        }
    
        public virtual ObjectResult<spDiscAssignments1_Result> spDiscAssignments1(Nullable<int> subpID)
        {
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDiscAssignments1_Result>("spDiscAssignments1", subpIDParameter);
        }
    
        public virtual ObjectResult<spDiscAssignments2_Result> spDiscAssignments2(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDiscAssignments2_Result>("spDiscAssignments2", projIDParameter);
        }
    
        public virtual ObjectResult<spDisciplines_Result> spDisciplines(Nullable<int> discID, Nullable<int> subpID, Nullable<int> projID)
        {
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDisciplines_Result>("spDisciplines", discIDParameter, subpIDParameter, projIDParameter);
        }
    
        public virtual ObjectResult<spDisciplines2_Result> spDisciplines2(Nullable<int> subpID)
        {
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDisciplines2_Result>("spDisciplines2", subpIDParameter);
        }
    
        public virtual ObjectResult<spFindUsersInRole_Result> spFindUsersInRole(Nullable<int> roleID, Nullable<int> userID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFindUsersInRole_Result>("spFindUsersInRole", roleIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<spGBUConfigActions_Result> spGBUConfigActions(Nullable<int> gBUID, string execType)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGBUConfigActions_Result>("spGBUConfigActions", gBUIDParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<spGBUInfoValues_Result> spGBUInfoValues(Nullable<int> gBUID)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGBUInfoValues_Result>("spGBUInfoValues", gBUIDParameter);
        }
    
        public virtual ObjectResult<spGBUs_Result> spGBUs(Nullable<int> gBUID)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGBUs_Result>("spGBUs", gBUIDParameter);
        }
    
        public virtual ObjectResult<spGBUSysParameters_Result> spGBUSysParameters(Nullable<int> gBUID, string parameterName)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGBUSysParameters_Result>("spGBUSysParameters", gBUIDParameter, parameterNameParameter);
        }
    
        public virtual ObjectResult<spGetAppAavSiteByAppID_Result> spGetAppAavSiteByAppID(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppAavSiteByAppID_Result>("spGetAppAavSiteByAppID", appIDParameter);
        }
    
        public virtual ObjectResult<spGetAppAppgroupAssignmentsForApp_Result> spGetAppAppgroupAssignmentsForApp(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppAppgroupAssignmentsForApp_Result>("spGetAppAppgroupAssignmentsForApp", appIdParameter);
        }
    
        public virtual ObjectResult<spGetAppAppgroupAssignmentsForAppgroup_Result> spGetAppAppgroupAssignmentsForAppgroup(Nullable<int> appGroupId)
        {
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppAppgroupAssignmentsForAppgroup_Result>("spGetAppAppgroupAssignmentsForAppgroup", appGroupIdParameter);
        }
    
        public virtual ObjectResult<spGetAppConfigAction_Result> spGetAppConfigAction(Nullable<int> appID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppConfigAction_Result>("spGetAppConfigAction", appIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<spGetAppConfigActions_Result> spGetAppConfigActions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppConfigActions_Result>("spGetAppConfigActions");
        }
    
        public virtual ObjectResult<spGetAppConfigActionsByAppID_Result> spGetAppConfigActionsByAppID(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppConfigActionsByAppID_Result>("spGetAppConfigActionsByAppID", appIDParameter);
        }
    
        public virtual ObjectResult<spGetAppGroupAssignments_Result> spGetAppGroupAssignments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppGroupAssignments_Result>("spGetAppGroupAssignments");
        }
    
        public virtual ObjectResult<spGetAppGroupConfigActions_Result> spGetAppGroupConfigActions(Nullable<int> appGroupID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppGroupConfigActions_Result>("spGetAppGroupConfigActions", appGroupIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<spGetAppGroupConfigActionsByAppGroupID_Result> spGetAppGroupConfigActionsByAppGroupID(Nullable<int> appGroupID)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppGroupConfigActionsByAppGroupID_Result>("spGetAppGroupConfigActionsByAppGroupID", appGroupIDParameter);
        }
    
        public virtual ObjectResult<spGetAppGroupInfoValues_Result> spGetAppGroupInfoValues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppGroupInfoValues_Result>("spGetAppGroupInfoValues");
        }
    
        public virtual ObjectResult<spGetAppGroupInfoValuesByAppGroupID_Result> spGetAppGroupInfoValuesByAppGroupID(Nullable<int> appGroupID)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppGroupInfoValuesByAppGroupID_Result>("spGetAppGroupInfoValuesByAppGroupID", appGroupIDParameter);
        }
    
        public virtual ObjectResult<spGetAppGroupInfoValuesByAppGroupIDandInfoName_Result> spGetAppGroupInfoValuesByAppGroupIDandInfoName(Nullable<int> appGroupID, string appGroupInfoName)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var appGroupInfoNameParameter = appGroupInfoName != null ?
                new ObjectParameter("AppGroupInfoName", appGroupInfoName) :
                new ObjectParameter("AppGroupInfoName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppGroupInfoValuesByAppGroupIDandInfoName_Result>("spGetAppGroupInfoValuesByAppGroupIDandInfoName", appGroupIDParameter, appGroupInfoNameParameter);
        }
    
        public virtual ObjectResult<spGetAppGroupList_Result> spGetAppGroupList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppGroupList_Result>("spGetAppGroupList");
        }
    
        public virtual ObjectResult<string> spGetAppGroupPath(Nullable<int> appGroupID)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetAppGroupPath", appGroupIDParameter);
        }
    
        public virtual ObjectResult<spGetAppGroupsForSite_Result> spGetAppGroupsForSite()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppGroupsForSite_Result>("spGetAppGroupsForSite");
        }
    
        public virtual ObjectResult<spGetAppGroupSiteAssignmentsForSite_Result> spGetAppGroupSiteAssignmentsForSite(Nullable<int> siteId)
        {
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppGroupSiteAssignmentsForSite_Result>("spGetAppGroupSiteAssignmentsForSite", siteIdParameter);
        }
    
        public virtual ObjectResult<spGetAppGroupSiteConfigActions_Result> spGetAppGroupSiteConfigActions(Nullable<int> appGroupID, Nullable<int> siteID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppGroupSiteConfigActions_Result>("spGetAppGroupSiteConfigActions", appGroupIDParameter, siteIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<spGetAppGroupSiteConfigActionsBySiteAndAppgroup_Result> spGetAppGroupSiteConfigActionsBySiteAndAppgroup(Nullable<int> appGroupID, Nullable<int> siteID)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppGroupSiteConfigActionsBySiteAndAppgroup_Result>("spGetAppGroupSiteConfigActionsBySiteAndAppgroup", appGroupIDParameter, siteIDParameter);
        }
    
        public virtual ObjectResult<string> spGetAppGroupSitePath(Nullable<int> appGroupID, Nullable<int> siteID)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetAppGroupSitePath", appGroupIDParameter, siteIDParameter);
        }
    
        public virtual ObjectResult<spGetAppInfoValues_Result> spGetAppInfoValues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppInfoValues_Result>("spGetAppInfoValues");
        }
    
        public virtual ObjectResult<spGetAppInfoValuesByAppID_Result> spGetAppInfoValuesByAppID(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppInfoValuesByAppID_Result>("spGetAppInfoValuesByAppID", appIDParameter);
        }
    
        public virtual ObjectResult<spGetAppInfoValuesByAppIDandInfoName_Result> spGetAppInfoValuesByAppIDandInfoName(Nullable<int> appID, string appInfoName)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var appInfoNameParameter = appInfoName != null ?
                new ObjectParameter("AppInfoName", appInfoName) :
                new ObjectParameter("AppInfoName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppInfoValuesByAppIDandInfoName_Result>("spGetAppInfoValuesByAppIDandInfoName", appIDParameter, appInfoNameParameter);
        }
    
        public virtual ObjectResult<spGetApplicationByAppID_Result> spGetApplicationByAppID(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationByAppID_Result>("spGetApplicationByAppID", appIDParameter);
        }
    
        public virtual ObjectResult<spGetApplicationGroups_Result> spGetApplicationGroups()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationGroups_Result>("spGetApplicationGroups");
        }
    
        public virtual ObjectResult<spGetApplicationGroupsByAppGroupID_Result> spGetApplicationGroupsByAppGroupID(Nullable<int> appGroupID)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationGroupsByAppGroupID_Result>("spGetApplicationGroupsByAppGroupID", appGroupIDParameter);
        }
    
        public virtual ObjectResult<spGetApplicationGroupsByAppID_Result> spGetApplicationGroupsByAppID(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationGroupsByAppID_Result>("spGetApplicationGroupsByAppID", appIDParameter);
        }
    
        public virtual ObjectResult<spGetApplicationGroupsByProjID_Result> spGetApplicationGroupsByProjID(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationGroupsByProjID_Result>("spGetApplicationGroupsByProjID", projIDParameter);
        }
    
        public virtual ObjectResult<spGetApplicationGroupsBySiteID_Result> spGetApplicationGroupsBySiteID(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationGroupsBySiteID_Result>("spGetApplicationGroupsBySiteID", siteIDParameter);
        }
    
        public virtual ObjectResult<spGetApplicationGroupsBySubpID_Result> spGetApplicationGroupsBySubpID(Nullable<int> subpID)
        {
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationGroupsBySubpID_Result>("spGetApplicationGroupsBySubpID", subpIDParameter);
        }
    
        public virtual ObjectResult<spGetApplications_Result> spGetApplications()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplications_Result>("spGetApplications");
        }
    
        public virtual ObjectResult<spGetApplicationsByAppGroupID_Result> spGetApplicationsByAppGroupID(Nullable<int> appGroupID)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationsByAppGroupID_Result>("spGetApplicationsByAppGroupID", appGroupIDParameter);
        }
    
        public virtual ObjectResult<spGetApplicationsByProjID_Result> spGetApplicationsByProjID(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationsByProjID_Result>("spGetApplicationsByProjID", projIDParameter);
        }
    
        public virtual ObjectResult<spGetApplicationsBySiteID_Result> spGetApplicationsBySiteID(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationsBySiteID_Result>("spGetApplicationsBySiteID", siteIDParameter);
        }
    
        public virtual ObjectResult<spGetApplicationsBySubpID_Result> spGetApplicationsBySubpID(Nullable<int> subpID)
        {
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationsBySubpID_Result>("spGetApplicationsBySubpID", subpIDParameter);
        }
    
        public virtual ObjectResult<spGetAppList_Result> spGetAppList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppList_Result>("spGetAppList");
        }
    
        public virtual ObjectResult<string> spGetAppPath(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetAppPath", appIDParameter);
        }
    
        public virtual ObjectResult<spGetAppProjAssignmentsForApp_Result> spGetAppProjAssignmentsForApp(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppProjAssignmentsForApp_Result>("spGetAppProjAssignmentsForApp", appIdParameter);
        }
    
        public virtual ObjectResult<spGetAppProjAssignmentsForProj_Result> spGetAppProjAssignmentsForProj(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppProjAssignmentsForProj_Result>("spGetAppProjAssignmentsForProj", projIdParameter);
        }
    
        public virtual ObjectResult<spGetAppProjDisAssignmentsForApp_Result> spGetAppProjDisAssignmentsForApp(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppProjDisAssignmentsForApp_Result>("spGetAppProjDisAssignmentsForApp", appIdParameter);
        }
    
        public virtual ObjectResult<spGetAppset_Result> spGetAppset(string appsetGuid)
        {
            var appsetGuidParameter = appsetGuid != null ?
                new ObjectParameter("AppsetGuid", appsetGuid) :
                new ObjectParameter("AppsetGuid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppset_Result>("spGetAppset", appsetGuidParameter);
        }
    
        public virtual ObjectResult<spGetAppSetAssignmentsByAppForOrdering_Result> spGetAppSetAssignmentsByAppForOrdering(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppSetAssignmentsByAppForOrdering_Result>("spGetAppSetAssignmentsByAppForOrdering", appIdParameter);
        }
    
        public virtual ObjectResult<spGetAppSetAssignmentsForApp_Result> spGetAppSetAssignmentsForApp(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppSetAssignmentsForApp_Result>("spGetAppSetAssignmentsForApp", appIdParameter);
        }
    
        public virtual ObjectResult<spGetAppsetByAppsetID_Result> spGetAppsetByAppsetID(Nullable<int> appsetID)
        {
            var appsetIDParameter = appsetID.HasValue ?
                new ObjectParameter("AppsetID", appsetID) :
                new ObjectParameter("AppsetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppsetByAppsetID_Result>("spGetAppsetByAppsetID", appsetIDParameter);
        }
    
        public virtual ObjectResult<spGetAppsForSite_Result> spGetAppsForSite()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppsForSite_Result>("spGetAppsForSite");
        }
    
        public virtual ObjectResult<spGetAppSiteAssignmentsForApp_Result> spGetAppSiteAssignmentsForApp(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppSiteAssignmentsForApp_Result>("spGetAppSiteAssignmentsForApp", appIdParameter);
        }
    
        public virtual ObjectResult<spGetAppSiteAssignmentsForSite_Result> spGetAppSiteAssignmentsForSite(Nullable<int> siteId)
        {
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppSiteAssignmentsForSite_Result>("spGetAppSiteAssignmentsForSite", siteIdParameter);
        }
    
        public virtual ObjectResult<spGetAppSiteConfigActions_Result> spGetAppSiteConfigActions(Nullable<int> appID, Nullable<int> siteID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppSiteConfigActions_Result>("spGetAppSiteConfigActions", appIDParameter, siteIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<spGetAppSiteConfigActionsBySiteAndApp_Result> spGetAppSiteConfigActionsBySiteAndApp(Nullable<int> siteID, Nullable<int> appID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppSiteConfigActionsBySiteAndApp_Result>("spGetAppSiteConfigActionsBySiteAndApp", siteIDParameter, appIDParameter);
        }
    
        public virtual ObjectResult<string> spGetAppSitePath(Nullable<int> appID, Nullable<int> siteID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetAppSitePath", appIDParameter, siteIDParameter);
        }
    
        public virtual ObjectResult<spGetAppSubprojAssignmentsForApp_Result> spGetAppSubprojAssignmentsForApp(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppSubprojAssignmentsForApp_Result>("spGetAppSubprojAssignmentsForApp", appIdParameter);
        }
    
        public virtual ObjectResult<spGetAppSubprojAssignmentsForSubproj_Result> spGetAppSubprojAssignmentsForSubproj(Nullable<int> subpId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppSubprojAssignmentsForSubproj_Result>("spGetAppSubprojAssignmentsForSubproj", subpIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetAppType(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetAppType", appIDParameter);
        }
    
        public virtual ObjectResult<spGetAppUsageExceptionRules_Result> spGetAppUsageExceptionRules(string oPT, string userID, string workstation1, string workstation2, string application)
        {
            var oPTParameter = oPT != null ?
                new ObjectParameter("OPT", oPT) :
                new ObjectParameter("OPT", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var workstation1Parameter = workstation1 != null ?
                new ObjectParameter("Workstation1", workstation1) :
                new ObjectParameter("Workstation1", typeof(string));
    
            var workstation2Parameter = workstation2 != null ?
                new ObjectParameter("Workstation2", workstation2) :
                new ObjectParameter("Workstation2", typeof(string));
    
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAppUsageExceptionRules_Result>("spGetAppUsageExceptionRules", oPTParameter, userIDParameter, workstation1Parameter, workstation2Parameter, applicationParameter);
        }
    
        public virtual ObjectResult<spGetAuditList_Result> spGetAuditList(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAuditList_Result>("spGetAuditList", tableNameParameter);
        }
    
        public virtual ObjectResult<spGetAvailableAppgroupForApp_Result> spGetAvailableAppgroupForApp(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableAppgroupForApp_Result>("spGetAvailableAppgroupForApp", appIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableAppGroupsForProjDisc_Result> spGetAvailableAppGroupsForProjDisc(Nullable<int> projId, Nullable<int> discId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableAppGroupsForProjDisc_Result>("spGetAvailableAppGroupsForProjDisc", projIdParameter, discIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableAppGroupsForProject_Result> spGetAvailableAppGroupsForProject(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableAppGroupsForProject_Result>("spGetAvailableAppGroupsForProject", projIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableAppGroupsForSite_Result> spGetAvailableAppGroupsForSite(Nullable<int> siteId)
        {
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableAppGroupsForSite_Result>("spGetAvailableAppGroupsForSite", siteIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableAppGroupsForSubProj_Result> spGetAvailableAppGroupsForSubProj(Nullable<int> subpId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableAppGroupsForSubProj_Result>("spGetAvailableAppGroupsForSubProj", subpIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableAppGroupsForSubProjDisc_Result> spGetAvailableAppGroupsForSubProjDisc(Nullable<int> subpId, Nullable<int> discId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableAppGroupsForSubProjDisc_Result>("spGetAvailableAppGroupsForSubProjDisc", subpIdParameter, discIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableAppSetForApp_Result> spGetAvailableAppSetForApp(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableAppSetForApp_Result>("spGetAvailableAppSetForApp", appIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableAppsForAppgroup_Result> spGetAvailableAppsForAppgroup(Nullable<int> appGroupId)
        {
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableAppsForAppgroup_Result>("spGetAvailableAppsForAppgroup", appGroupIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableAppsForProj_Result> spGetAvailableAppsForProj(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableAppsForProj_Result>("spGetAvailableAppsForProj", projIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableAppsForProjDisc_Result> spGetAvailableAppsForProjDisc(Nullable<int> projId, Nullable<int> discId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableAppsForProjDisc_Result>("spGetAvailableAppsForProjDisc", projIdParameter, discIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableAppsForSite_Result> spGetAvailableAppsForSite(Nullable<int> siteId)
        {
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableAppsForSite_Result>("spGetAvailableAppsForSite", siteIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableAppsForSubProj_Result> spGetAvailableAppsForSubProj(Nullable<int> subpId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableAppsForSubProj_Result>("spGetAvailableAppsForSubProj", subpIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableAppsForSubProjDisc_Result> spGetAvailableAppsForSubProjDisc(Nullable<int> subpId, Nullable<int> discId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableAppsForSubProjDisc_Result>("spGetAvailableAppsForSubProjDisc", subpIdParameter, discIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableDisciplinesForProject_Result> spGetAvailableDisciplinesForProject(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableDisciplinesForProject_Result>("spGetAvailableDisciplinesForProject", projIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableDisciplinesForSubProject_Result> spGetAvailableDisciplinesForSubProject(Nullable<int> subpId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableDisciplinesForSubProject_Result>("spGetAvailableDisciplinesForSubProject", subpIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableFunctionsForRole_Result> spGetAvailableFunctionsForRole(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableFunctionsForRole_Result>("spGetAvailableFunctionsForRole", roleIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableProjDisForApp_Result> spGetAvailableProjDisForApp(Nullable<int> siteId)
        {
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableProjDisForApp_Result>("spGetAvailableProjDisForApp", siteIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableProjectsForAppGroup_Result> spGetAvailableProjectsForAppGroup(Nullable<int> appGroupId)
        {
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableProjectsForAppGroup_Result>("spGetAvailableProjectsForAppGroup", appGroupIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableProjectsForDiscipline_Result> spGetAvailableProjectsForDiscipline(Nullable<int> discId)
        {
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableProjectsForDiscipline_Result>("spGetAvailableProjectsForDiscipline", discIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableProjectsForSite_Result> spGetAvailableProjectsForSite(Nullable<int> siteId)
        {
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableProjectsForSite_Result>("spGetAvailableProjectsForSite", siteIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableProjectsForSubProject_Result> spGetAvailableProjectsForSubProject(Nullable<int> subProjId)
        {
            var subProjIdParameter = subProjId.HasValue ?
                new ObjectParameter("SubProjId", subProjId) :
                new ObjectParameter("SubProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableProjectsForSubProject_Result>("spGetAvailableProjectsForSubProject", subProjIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableProjsForApp_Result> spGetAvailableProjsForApp(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableProjsForApp_Result>("spGetAvailableProjsForApp", appIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableRolesForFunction_Result> spGetAvailableRolesForFunction(Nullable<int> functionID)
        {
            var functionIDParameter = functionID.HasValue ?
                new ObjectParameter("FunctionID", functionID) :
                new ObjectParameter("FunctionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableRolesForFunction_Result>("spGetAvailableRolesForFunction", functionIDParameter);
        }
    
        public virtual ObjectResult<spGetAvailableRolesForUser_Result> spGetAvailableRolesForUser(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableRolesForUser_Result>("spGetAvailableRolesForUser", userIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableSitesForApp_Result> spGetAvailableSitesForApp(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableSitesForApp_Result>("spGetAvailableSitesForApp", appIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableSitesForAppGroup_Result> spGetAvailableSitesForAppGroup(Nullable<int> appGroupId)
        {
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableSitesForAppGroup_Result>("spGetAvailableSitesForAppGroup", appGroupIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableSitesForProject_Result> spGetAvailableSitesForProject(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableSitesForProject_Result>("spGetAvailableSitesForProject", projIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableSubProjectsForProject_Result> spGetAvailableSubProjectsForProject(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableSubProjectsForProject_Result>("spGetAvailableSubProjectsForProject", projIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableSubprojsForApp_Result> spGetAvailableSubprojsForApp(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableSubprojsForApp_Result>("spGetAvailableSubprojsForApp", appIdParameter);
        }
    
        public virtual ObjectResult<spGetAvailableUsersForRole_Result> spGetAvailableUsersForRole(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvailableUsersForRole_Result>("spGetAvailableUsersForRole", roleIdParameter);
        }
    
        public virtual ObjectResult<spGetDisciplines_Result> spGetDisciplines()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDisciplines_Result>("spGetDisciplines");
        }
    
        public virtual ObjectResult<spGetDisciplinesByDiscID_Result> spGetDisciplinesByDiscID(Nullable<int> discID)
        {
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDisciplinesByDiscID_Result>("spGetDisciplinesByDiscID", discIDParameter);
        }
    
        public virtual ObjectResult<spGetDiscList_Result> spGetDiscList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDiscList_Result>("spGetDiscList");
        }
    
        public virtual ObjectResult<spGetFunction_Result> spGetFunction()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFunction_Result>("spGetFunction");
        }
    
        public virtual ObjectResult<spGetFunctionByFunctionID_Result> spGetFunctionByFunctionID(Nullable<int> functionId)
        {
            var functionIdParameter = functionId.HasValue ?
                new ObjectParameter("FunctionId", functionId) :
                new ObjectParameter("FunctionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFunctionByFunctionID_Result>("spGetFunctionByFunctionID", functionIdParameter);
        }
    
        public virtual ObjectResult<spGetFunctionsByRoleID_Result> spGetFunctionsByRoleID(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFunctionsByRoleID_Result>("spGetFunctionsByRoleID", roleIdParameter);
        }
    
        public virtual ObjectResult<spGetGBUConfigAction_Result> spGetGBUConfigAction(Nullable<int> gBUID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUConfigAction_Result>("spGetGBUConfigAction", gBUIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<spGetGBUConfigActions_Result> spGetGBUConfigActions(Nullable<int> gBUID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUConfigActions_Result>("spGetGBUConfigActions", gBUIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<spGetGBUConfigActionsByGBUID_Result> spGetGBUConfigActionsByGBUID(Nullable<int> gBUID)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUConfigActionsByGBUID_Result>("spGetGBUConfigActionsByGBUID", gBUIDParameter);
        }
    
        public virtual ObjectResult<spGetGBUConfigDetailByGBUID_Result> spGetGBUConfigDetailByGBUID(Nullable<int> gBUID, string execType, Nullable<int> seqNum)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUConfigDetailByGBUID_Result>("spGetGBUConfigDetailByGBUID", gBUIDParameter, execTypeParameter, seqNumParameter);
        }
    
        public virtual ObjectResult<spGetGBUConfigGroupingByGBUID_Result> spGetGBUConfigGroupingByGBUID(Nullable<int> gBUID)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUConfigGroupingByGBUID_Result>("spGetGBUConfigGroupingByGBUID", gBUIDParameter);
        }
    
        public virtual ObjectResult<spGetGBUInfoValues_Result> spGetGBUInfoValues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUInfoValues_Result>("spGetGBUInfoValues");
        }
    
        public virtual ObjectResult<spGetGBUInfoValuesByGBUID_Result> spGetGBUInfoValuesByGBUID(Nullable<int> gBUID)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUInfoValuesByGBUID_Result>("spGetGBUInfoValuesByGBUID", gBUIDParameter);
        }
    
        public virtual ObjectResult<spGetGBUInfoValuesByGBUIDandInfoName_Result> spGetGBUInfoValuesByGBUIDandInfoName(Nullable<int> gBUID, string gBUInfoName)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var gBUInfoNameParameter = gBUInfoName != null ?
                new ObjectParameter("GBUInfoName", gBUInfoName) :
                new ObjectParameter("GBUInfoName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUInfoValuesByGBUIDandInfoName_Result>("spGetGBUInfoValuesByGBUIDandInfoName", gBUIDParameter, gBUInfoNameParameter);
        }
    
        public virtual ObjectResult<spGetGBUList_Result> spGetGBUList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUList_Result>("spGetGBUList");
        }
    
        public virtual ObjectResult<string> spGetGBUPath(Nullable<int> gBUID)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetGBUPath", gBUIDParameter);
        }
    
        public virtual ObjectResult<spGetGBUS_Result> spGetGBUS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUS_Result>("spGetGBUS");
        }
    
        public virtual ObjectResult<spGetGBUSByGBUID_Result> spGetGBUSByGBUID(Nullable<int> gBUID)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUSByGBUID_Result>("spGetGBUSByGBUID", gBUIDParameter);
        }
    
        public virtual ObjectResult<spGetGBUSByGBUInfoName_Result> spGetGBUSByGBUInfoName(Nullable<int> gBUInfoName)
        {
            var gBUInfoNameParameter = gBUInfoName.HasValue ?
                new ObjectParameter("GBUInfoName", gBUInfoName) :
                new ObjectParameter("GBUInfoName", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUSByGBUInfoName_Result>("spGetGBUSByGBUInfoName", gBUInfoNameParameter);
        }
    
        public virtual ObjectResult<spGetGBUSByParameterName_Result> spGetGBUSByParameterName(Nullable<int> parameterName)
        {
            var parameterNameParameter = parameterName.HasValue ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUSByParameterName_Result>("spGetGBUSByParameterName", parameterNameParameter);
        }
    
        public virtual ObjectResult<spGetGBUSysParameters_Result> spGetGBUSysParameters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUSysParameters_Result>("spGetGBUSysParameters");
        }
    
        public virtual ObjectResult<spGetGBUSysParametersByGBUID_Result> spGetGBUSysParametersByGBUID(Nullable<int> gBUID)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUSysParametersByGBUID_Result>("spGetGBUSysParametersByGBUID", gBUIDParameter);
        }
    
        public virtual ObjectResult<spGetGBUSysParametersByGBUIDandParameterName_Result> spGetGBUSysParametersByGBUIDandParameterName(Nullable<int> gBUID, string parameterName)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGBUSysParametersByGBUIDandParameterName_Result>("spGetGBUSysParametersByGBUIDandParameterName", gBUIDParameter, parameterNameParameter);
        }
    
        public virtual ObjectResult<spGetGeographicSitesList_Result> spGetGeographicSitesList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetGeographicSitesList_Result>("spGetGeographicSitesList");
        }
    
        public virtual ObjectResult<spGetJobWbsByProjID_Result> spGetJobWbsByProjID(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetJobWbsByProjID_Result>("spGetJobWbsByProjID", projIDParameter);
        }
    
        public virtual ObjectResult<spGetJobWbsBySiteID_Result> spGetJobWbsBySiteID(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetJobWbsBySiteID_Result>("spGetJobWbsBySiteID", siteIDParameter);
        }
    
        public virtual ObjectResult<spGetOrganizationalSitesList_Result> spGetOrganizationalSitesList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOrganizationalSitesList_Result>("spGetOrganizationalSitesList");
        }
    
        public virtual ObjectResult<spGetProjAppGroupAssignmentsForAppGroup_Result> spGetProjAppGroupAssignmentsForAppGroup(Nullable<int> appGroupId)
        {
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjAppGroupAssignmentsForAppGroup_Result>("spGetProjAppGroupAssignmentsForAppGroup", appGroupIdParameter);
        }
    
        public virtual ObjectResult<spGetProjAppGroupAssignmentsForProj_Result> spGetProjAppGroupAssignmentsForProj(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjAppGroupAssignmentsForProj_Result>("spGetProjAppGroupAssignmentsForProj", projIdParameter);
        }
    
        public virtual ObjectResult<spGetProjConfigAction_Result> spGetProjConfigAction(Nullable<int> projID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjConfigAction_Result>("spGetProjConfigAction", projIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<spGetProjConfigActions_Result> spGetProjConfigActions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjConfigActions_Result>("spGetProjConfigActions");
        }
    
        public virtual ObjectResult<spGetProjConfigActionsByProjID_Result> spGetProjConfigActionsByProjID(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjConfigActionsByProjID_Result>("spGetProjConfigActionsByProjID", projIDParameter);
        }
    
        public virtual ObjectResult<spGetProjDiscAppAssignmentsForProjDisc_Result> spGetProjDiscAppAssignmentsForProjDisc(Nullable<int> projId, Nullable<int> discId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjDiscAppAssignmentsForProjDisc_Result>("spGetProjDiscAppAssignmentsForProjDisc", projIdParameter, discIdParameter);
        }
    
        public virtual ObjectResult<spGetProjDiscAppGroupAssignmentsForProjDisc_Result> spGetProjDiscAppGroupAssignmentsForProjDisc(Nullable<int> projId, Nullable<int> discId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjDiscAppGroupAssignmentsForProjDisc_Result>("spGetProjDiscAppGroupAssignmentsForProjDisc", projIdParameter, discIdParameter);
        }
    
        public virtual ObjectResult<spGetProjDiscAssignmentsForDisc_Result> spGetProjDiscAssignmentsForDisc(Nullable<int> discId)
        {
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjDiscAssignmentsForDisc_Result>("spGetProjDiscAssignmentsForDisc", discIdParameter);
        }
    
        public virtual ObjectResult<spGetProjDiscAssignmentsForProj_Result> spGetProjDiscAssignmentsForProj(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjDiscAssignmentsForProj_Result>("spGetProjDiscAssignmentsForProj", projIdParameter);
        }
    
        public virtual ObjectResult<spGetProject_Result> spGetProject(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProject_Result>("spGetProject", projIdParameter);
        }
    
        public virtual ObjectResult<spGetProjectInfoValues_Result> spGetProjectInfoValues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjectInfoValues_Result>("spGetProjectInfoValues");
        }
    
        public virtual ObjectResult<spGetProjectInfoValuesByProjectID_Result> spGetProjectInfoValuesByProjectID(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjectInfoValuesByProjectID_Result>("spGetProjectInfoValuesByProjectID", projIDParameter);
        }
    
        public virtual ObjectResult<spGetProjectInfoValuesByProjectIDandInfoName_Result> spGetProjectInfoValuesByProjectIDandInfoName(Nullable<int> projID, string projInfoName)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var projInfoNameParameter = projInfoName != null ?
                new ObjectParameter("ProjInfoName", projInfoName) :
                new ObjectParameter("ProjInfoName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjectInfoValuesByProjectIDandInfoName_Result>("spGetProjectInfoValuesByProjectIDandInfoName", projIDParameter, projInfoNameParameter);
        }
    
        public virtual ObjectResult<string> spGetProjectJobWBSPath(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetProjectJobWBSPath", projIDParameter);
        }
    
        public virtual ObjectResult<string> spGetProjectPath(Nullable<int> projID, Nullable<int> siteID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetProjectPath", projIDParameter, siteIDParameter);
        }
    
        public virtual ObjectResult<spGetProjects_Result> spGetProjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjects_Result>("spGetProjects");
        }
    
        public virtual ObjectResult<spGetProjectsByAppGroupID_Result> spGetProjectsByAppGroupID(Nullable<int> appGroupID)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjectsByAppGroupID_Result>("spGetProjectsByAppGroupID", appGroupIDParameter);
        }
    
        public virtual ObjectResult<spGetProjectsByAppID_Result> spGetProjectsByAppID(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjectsByAppID_Result>("spGetProjectsByAppID", appIDParameter);
        }
    
        public virtual ObjectResult<spGetProjectsByJobWBS_Result> spGetProjectsByJobWBS(string job, string wBS)
        {
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var wBSParameter = wBS != null ?
                new ObjectParameter("WBS", wBS) :
                new ObjectParameter("WBS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjectsByJobWBS_Result>("spGetProjectsByJobWBS", jobParameter, wBSParameter);
        }
    
        public virtual ObjectResult<spGetProjectsBySiteID_Result> spGetProjectsBySiteID(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjectsBySiteID_Result>("spGetProjectsBySiteID", siteIDParameter);
        }
    
        public virtual ObjectResult<spGetProjList_Result> spGetProjList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjList_Result>("spGetProjList");
        }
    
        public virtual int spGetProjSByParameterName(Nullable<int> parameterName)
        {
            var parameterNameParameter = parameterName.HasValue ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetProjSByParameterName", parameterNameParameter);
        }
    
        public virtual ObjectResult<spGetProjSiteAssignmentsForProj_Result> spGetProjSiteAssignmentsForProj(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjSiteAssignmentsForProj_Result>("spGetProjSiteAssignmentsForProj", projIdParameter);
        }
    
        public virtual ObjectResult<spGetProjSiteAssignmentsForProjList_Result> spGetProjSiteAssignmentsForProjList(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjSiteAssignmentsForProjList_Result>("spGetProjSiteAssignmentsForProjList", projIdParameter);
        }
    
        public virtual ObjectResult<spGetProjSiteAssignmentsForSite_Result> spGetProjSiteAssignmentsForSite(Nullable<int> siteId)
        {
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjSiteAssignmentsForSite_Result>("spGetProjSiteAssignmentsForSite", siteIdParameter);
        }
    
        public virtual ObjectResult<spGetProjSiteAssignmentWithProj_Result> spGetProjSiteAssignmentWithProj(Nullable<int> projId, Nullable<int> siteId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjSiteAssignmentWithProj_Result>("spGetProjSiteAssignmentWithProj", projIdParameter, siteIdParameter);
        }
    
        public virtual ObjectResult<spGetProjSiteAssignmentWithSite_Result> spGetProjSiteAssignmentWithSite(Nullable<int> projId, Nullable<int> siteId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjSiteAssignmentWithSite_Result>("spGetProjSiteAssignmentWithSite", projIdParameter, siteIdParameter);
        }
    
        public virtual ObjectResult<spGetProjSubProjAssignmentsForProj_Result> spGetProjSubProjAssignmentsForProj(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjSubProjAssignmentsForProj_Result>("spGetProjSubProjAssignmentsForProj", projIdParameter);
        }
    
        public virtual ObjectResult<spGetProjSubProjAssignmentsForSubProj_Result> spGetProjSubProjAssignmentsForSubProj(Nullable<int> subProjId)
        {
            var subProjIdParameter = subProjId.HasValue ?
                new ObjectParameter("SubProjId", subProjId) :
                new ObjectParameter("SubProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjSubProjAssignmentsForSubProj_Result>("spGetProjSubProjAssignmentsForSubProj", subProjIdParameter);
        }
    
        public virtual ObjectResult<spGetProjsWithSite_Result> spGetProjsWithSite()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjsWithSite_Result>("spGetProjsWithSite");
        }
    
        public virtual ObjectResult<spGetProjSysParameters_Result> spGetProjSysParameters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjSysParameters_Result>("spGetProjSysParameters");
        }
    
        public virtual ObjectResult<spGetProjSysParametersByProjID_Result> spGetProjSysParametersByProjID(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjSysParametersByProjID_Result>("spGetProjSysParametersByProjID", projIDParameter);
        }
    
        public virtual ObjectResult<spGetProjSysParametersByProjIDandParameterName_Result> spGetProjSysParametersByProjIDandParameterName(Nullable<int> projID, string parameterName)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProjSysParametersByProjIDandParameterName_Result>("spGetProjSysParametersByProjIDandParameterName", projIDParameter, parameterNameParameter);
        }
    
        public virtual ObjectResult<spGetReplicationSourceByKey_Result> spGetReplicationSourceByKey(Nullable<int> siteID, Nullable<int> projID, Nullable<int> subpID, Nullable<int> discID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetReplicationSourceByKey_Result>("spGetReplicationSourceByKey", siteIDParameter, projIDParameter, subpIDParameter, discIDParameter);
        }
    
        public virtual ObjectResult<spGetReplicationSources_Result> spGetReplicationSources(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetReplicationSources_Result>("spGetReplicationSources", projIDParameter);
        }
    
        public virtual ObjectResult<spGetRole_Result> spGetRole()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRole_Result>("spGetRole");
        }
    
        public virtual ObjectResult<spGetRoleByRoleID_Result> spGetRoleByRoleID(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRoleByRoleID_Result>("spGetRoleByRoleID", roleIdParameter);
        }
    
        public virtual ObjectResult<spGetRolesAndFunctions_Result> spGetRolesAndFunctions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRolesAndFunctions_Result>("spGetRolesAndFunctions");
        }
    
        public virtual ObjectResult<spGetRolesByFunctionID_Result> spGetRolesByFunctionID(Nullable<int> functionId)
        {
            var functionIdParameter = functionId.HasValue ?
                new ObjectParameter("FunctionId", functionId) :
                new ObjectParameter("FunctionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRolesByFunctionID_Result>("spGetRolesByFunctionID", functionIdParameter);
        }
    
        public virtual ObjectResult<spGetRolesByUser_Result> spGetRolesByUser(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRolesByUser_Result>("spGetRolesByUser", userIdParameter);
        }
    
        public virtual ObjectResult<spGetRolesForUser_Result> spGetRolesForUser(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRolesForUser_Result>("spGetRolesForUser", userIdParameter);
        }
    
        public virtual ObjectResult<spGetRunOnceInfoByKey_Result> spGetRunOnceInfoByKey(string userID, string workstation, string commandOrMessage)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var workstationParameter = workstation != null ?
                new ObjectParameter("Workstation", workstation) :
                new ObjectParameter("Workstation", typeof(string));
    
            var commandOrMessageParameter = commandOrMessage != null ?
                new ObjectParameter("CommandOrMessage", commandOrMessage) :
                new ObjectParameter("CommandOrMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRunOnceInfoByKey_Result>("spGetRunOnceInfoByKey", userIDParameter, workstationParameter, commandOrMessageParameter);
        }
    
        public virtual ObjectResult<spGetRunOnceInfos_Result> spGetRunOnceInfos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRunOnceInfos_Result>("spGetRunOnceInfos");
        }
    
        public virtual ObjectResult<string> spGetRunPostHTA(Nullable<int> gBUID, Nullable<int> siteID, Nullable<int> projID, Nullable<int> appGroupID, Nullable<int> appID)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetRunPostHTA", gBUIDParameter, siteIDParameter, projIDParameter, appGroupIDParameter, appIDParameter);
        }
    
        public virtual ObjectResult<spGetSiteAppGroupAssignmentsForAppGroup_Result> spGetSiteAppGroupAssignmentsForAppGroup(Nullable<int> appGroupId)
        {
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSiteAppGroupAssignmentsForAppGroup_Result>("spGetSiteAppGroupAssignmentsForAppGroup", appGroupIdParameter);
        }
    
        public virtual ObjectResult<spGetSiteAppGroupAssignmentsForSite_Result> spGetSiteAppGroupAssignmentsForSite(Nullable<int> siteId)
        {
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSiteAppGroupAssignmentsForSite_Result>("spGetSiteAppGroupAssignmentsForSite", siteIdParameter);
        }
    
        public virtual ObjectResult<spGetSiteConfigAction_Result> spGetSiteConfigAction(Nullable<int> siteID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSiteConfigAction_Result>("spGetSiteConfigAction", siteIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<spGetSiteConfigActions_Result> spGetSiteConfigActions(Nullable<int> siteID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSiteConfigActions_Result>("spGetSiteConfigActions", siteIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<spGetSiteConfigActionsBySiteID_Result> spGetSiteConfigActionsBySiteID(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSiteConfigActionsBySiteID_Result>("spGetSiteConfigActionsBySiteID", siteIDParameter);
        }
    
        public virtual ObjectResult<spGetSiteInfoValues_Result> spGetSiteInfoValues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSiteInfoValues_Result>("spGetSiteInfoValues");
        }
    
        public virtual ObjectResult<spGetSiteInfoValuesBySiteID_Result> spGetSiteInfoValuesBySiteID(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSiteInfoValuesBySiteID_Result>("spGetSiteInfoValuesBySiteID", siteIDParameter);
        }
    
        public virtual ObjectResult<spGetSiteInfoValuesBySiteIDandInfoName_Result> spGetSiteInfoValuesBySiteIDandInfoName(Nullable<int> siteID, string siteInfoName)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var siteInfoNameParameter = siteInfoName != null ?
                new ObjectParameter("SiteInfoName", siteInfoName) :
                new ObjectParameter("SiteInfoName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSiteInfoValuesBySiteIDandInfoName_Result>("spGetSiteInfoValuesBySiteIDandInfoName", siteIDParameter, siteInfoNameParameter);
        }
    
        public virtual ObjectResult<string> spGetSiteJobWBSPath(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetSiteJobWBSPath", siteIDParameter);
        }
    
        public virtual ObjectResult<spGetSiteMap_Result> spGetSiteMap()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSiteMap_Result>("spGetSiteMap");
        }
    
        public virtual ObjectResult<string> spGetSitePath(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetSitePath", siteIDParameter);
        }
    
        public virtual ObjectResult<spGetSiteProjAssignmentsForProj_Result> spGetSiteProjAssignmentsForProj(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSiteProjAssignmentsForProj_Result>("spGetSiteProjAssignmentsForProj", projIdParameter);
        }
    
        public virtual ObjectResult<spGetSiteProjAssignmentsForSite_Result> spGetSiteProjAssignmentsForSite(Nullable<int> siteId)
        {
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSiteProjAssignmentsForSite_Result>("spGetSiteProjAssignmentsForSite", siteIdParameter);
        }
    
        public virtual ObjectResult<spGetSites_Result> spGetSites()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSites_Result>("spGetSites");
        }
    
        public virtual ObjectResult<spGetSitesByAppGroupID_Result> spGetSitesByAppGroupID(Nullable<int> appGroupID)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSitesByAppGroupID_Result>("spGetSitesByAppGroupID", appGroupIDParameter);
        }
    
        public virtual ObjectResult<spGetSitesByAppID_Result> spGetSitesByAppID(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSitesByAppID_Result>("spGetSitesByAppID", appIDParameter);
        }
    
        public virtual ObjectResult<spGetSitesByGBUID_Result> spGetSitesByGBUID(Nullable<int> gBUID)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSitesByGBUID_Result>("spGetSitesByGBUID", gBUIDParameter);
        }
    
        public virtual ObjectResult<spGetSitesByJobWBS_Result> spGetSitesByJobWBS(string job, string wBS)
        {
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var wBSParameter = wBS != null ?
                new ObjectParameter("WBS", wBS) :
                new ObjectParameter("WBS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSitesByJobWBS_Result>("spGetSitesByJobWBS", jobParameter, wBSParameter);
        }
    
        public virtual ObjectResult<spGetSitesByProjID_Result> spGetSitesByProjID(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSitesByProjID_Result>("spGetSitesByProjID", projIDParameter);
        }
    
        public virtual ObjectResult<spGetSitesBySiteID_Result> spGetSitesBySiteID(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSitesBySiteID_Result>("spGetSitesBySiteID", siteIDParameter);
        }
    
        public virtual ObjectResult<spGetSitesGeographical_Result> spGetSitesGeographical()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSitesGeographical_Result>("spGetSitesGeographical");
        }
    
        public virtual ObjectResult<spGetSitesList_Result> spGetSitesList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSitesList_Result>("spGetSitesList");
        }
    
        public virtual ObjectResult<spGetSitesOrganizational_Result> spGetSitesOrganizational()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSitesOrganizational_Result>("spGetSitesOrganizational");
        }
    
        public virtual ObjectResult<spGetSitesWithAppGroups_Result> spGetSitesWithAppGroups()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSitesWithAppGroups_Result>("spGetSitesWithAppGroups");
        }
    
        public virtual ObjectResult<spGetSitesWithApps_Result> spGetSitesWithApps()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSitesWithApps_Result>("spGetSitesWithApps");
        }
    
        public virtual ObjectResult<spGetSoftwarePublisher_Result> spGetSoftwarePublisher()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSoftwarePublisher_Result>("spGetSoftwarePublisher");
        }
    
        public virtual ObjectResult<spGetSoftwarePublisherByID_Result> spGetSoftwarePublisherByID(Nullable<int> softwarePublisherID)
        {
            var softwarePublisherIDParameter = softwarePublisherID.HasValue ?
                new ObjectParameter("SoftwarePublisherID", softwarePublisherID) :
                new ObjectParameter("SoftwarePublisherID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSoftwarePublisherByID_Result>("spGetSoftwarePublisherByID", softwarePublisherIDParameter);
        }
    
        public virtual ObjectResult<spGetSoftwarePublishers_Result> spGetSoftwarePublishers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSoftwarePublishers_Result>("spGetSoftwarePublishers");
        }
    
        public virtual ObjectResult<spGetSubPList_Result> spGetSubPList(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubPList_Result>("spGetSubPList", projIdParameter);
        }
    
        public virtual ObjectResult<spGetSubProjAppAssignmentsForSubProj_Result> spGetSubProjAppAssignmentsForSubProj(Nullable<int> subpId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubProjAppAssignmentsForSubProj_Result>("spGetSubProjAppAssignmentsForSubProj", subpIdParameter);
        }
    
        public virtual ObjectResult<spGetSubProjAppGroupAssignmentsForSubProj_Result> spGetSubProjAppGroupAssignmentsForSubProj(Nullable<int> subpId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubProjAppGroupAssignmentsForSubProj_Result>("spGetSubProjAppGroupAssignmentsForSubProj", subpIdParameter);
        }
    
        public virtual ObjectResult<spGetSubProjDiscAppAssignmentsForSubProjDisc_Result> spGetSubProjDiscAppAssignmentsForSubProjDisc(Nullable<int> subpId, Nullable<int> discId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubProjDiscAppAssignmentsForSubProjDisc_Result>("spGetSubProjDiscAppAssignmentsForSubProjDisc", subpIdParameter, discIdParameter);
        }
    
        public virtual ObjectResult<spGetSubProjDiscAppGroupAssignmentsForSubProjDisc_Result> spGetSubProjDiscAppGroupAssignmentsForSubProjDisc(Nullable<int> subpId, Nullable<int> discId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            var discIdParameter = discId.HasValue ?
                new ObjectParameter("DiscId", discId) :
                new ObjectParameter("DiscId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubProjDiscAppGroupAssignmentsForSubProjDisc_Result>("spGetSubProjDiscAppGroupAssignmentsForSubProjDisc", subpIdParameter, discIdParameter);
        }
    
        public virtual ObjectResult<spGetSubProjDiscAssignmentsForSubProj_Result> spGetSubProjDiscAssignmentsForSubProj(Nullable<int> subpId)
        {
            var subpIdParameter = subpId.HasValue ?
                new ObjectParameter("SubpId", subpId) :
                new ObjectParameter("SubpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubProjDiscAssignmentsForSubProj_Result>("spGetSubProjDiscAssignmentsForSubProj", subpIdParameter);
        }
    
        public virtual ObjectResult<spGetSubProject_Result> spGetSubProject(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubProject_Result>("spGetSubProject", idParameter);
        }
    
        public virtual ObjectResult<spGetSubprojectsByAppGroupID_Result> spGetSubprojectsByAppGroupID(Nullable<int> appGroupID)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubprojectsByAppGroupID_Result>("spGetSubprojectsByAppGroupID", appGroupIDParameter);
        }
    
        public virtual ObjectResult<spGetSubprojectsByAppID_Result> spGetSubprojectsByAppID(Nullable<int> appID)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubprojectsByAppID_Result>("spGetSubprojectsByAppID", appIDParameter);
        }
    
        public virtual ObjectResult<spGetSubProjectsForApplication_Result> spGetSubProjectsForApplication(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubProjectsForApplication_Result>("spGetSubProjectsForApplication", appIdParameter);
        }
    
        public virtual ObjectResult<spGetSubProjectsForProject_Result> spGetSubProjectsForProject(Nullable<int> projId)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSubProjectsForProject_Result>("spGetSubProjectsForProject", projIdParameter);
        }
    
        public virtual ObjectResult<spGetSystemConfigActions_Result> spGetSystemConfigActions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSystemConfigActions_Result>("spGetSystemConfigActions");
        }
    
        public virtual ObjectResult<spGetSystemInfoValueByInfoName_Result> spGetSystemInfoValueByInfoName(string systemInfoName)
        {
            var systemInfoNameParameter = systemInfoName != null ?
                new ObjectParameter("SystemInfoName", systemInfoName) :
                new ObjectParameter("SystemInfoName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSystemInfoValueByInfoName_Result>("spGetSystemInfoValueByInfoName", systemInfoNameParameter);
        }
    
        public virtual ObjectResult<spGetSystemInfoValues_Result> spGetSystemInfoValues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSystemInfoValues_Result>("spGetSystemInfoValues");
        }
    
        public virtual ObjectResult<spGetSystemParameterConfigAction_Result> spGetSystemParameterConfigAction(string parameterName, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSystemParameterConfigAction_Result>("spGetSystemParameterConfigAction", parameterNameParameter, seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<string> spGetSystemParameterPath()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetSystemParameterPath");
        }
    
        public virtual ObjectResult<spGetSystemParameters_Result> spGetSystemParameters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSystemParameters_Result>("spGetSystemParameters");
        }
    
        public virtual ObjectResult<spGetSystemParametersByParameterName_Result> spGetSystemParametersByParameterName(string parameterName)
        {
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSystemParametersByParameterName_Result>("spGetSystemParametersByParameterName", parameterNameParameter);
        }
    
        public virtual ObjectResult<spGetSystemParametersConfigActionsByParameterName_Result> spGetSystemParametersConfigActionsByParameterName(Nullable<int> seqNum, Nullable<int> subSeqNum, string execType)
        {
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSystemParametersConfigActionsByParameterName_Result>("spGetSystemParametersConfigActionsByParameterName", seqNumParameter, subSeqNumParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<string> spGetSystemPath()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetSystemPath");
        }
    
        public virtual ObjectResult<spGetThisJobWbsForProject_Result> spGetThisJobWbsForProject(Nullable<int> projID, string job, string wBS)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var wBSParameter = wBS != null ?
                new ObjectParameter("WBS", wBS) :
                new ObjectParameter("WBS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetThisJobWbsForProject_Result>("spGetThisJobWbsForProject", projIDParameter, jobParameter, wBSParameter);
        }
    
        public virtual ObjectResult<spGetThisJobWbsForSite_Result> spGetThisJobWbsForSite(Nullable<int> siteID, string job, string wBS)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var wBSParameter = wBS != null ?
                new ObjectParameter("WBS", wBS) :
                new ObjectParameter("WBS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetThisJobWbsForSite_Result>("spGetThisJobWbsForSite", siteIDParameter, jobParameter, wBSParameter);
        }
    
        public virtual ObjectResult<spGetUser_Result> spGetUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUser_Result>("spGetUser");
        }
    
        public virtual ObjectResult<spGetUserByUserID_Result> spGetUserByUserID(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserByUserID_Result>("spGetUserByUserID", userIdParameter);
        }
    
        public virtual ObjectResult<spGetUserHistoryNetByKey_Result> spGetUserHistoryNetByKey(string userID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<int> siteID, Nullable<int> projID, Nullable<int> discID, Nullable<int> appID, string job, string wBS)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var wBSParameter = wBS != null ?
                new ObjectParameter("WBS", wBS) :
                new ObjectParameter("WBS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserHistoryNetByKey_Result>("spGetUserHistoryNetByKey", userIDParameter, startTimeParameter, endTimeParameter, siteIDParameter, projIDParameter, discIDParameter, appIDParameter, jobParameter, wBSParameter);
        }
    
        public virtual ObjectResult<spGetUserPermision_Result> spGetUserPermision(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserPermision_Result>("spGetUserPermision", userIDParameter);
        }
    
        public virtual ObjectResult<spGetUserPermision2_Result> spGetUserPermision2(string userID, Nullable<int> entityID, string entityType)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var entityTypeParameter = entityType != null ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserPermision2_Result>("spGetUserPermision2", userIDParameter, entityIDParameter, entityTypeParameter);
        }
    
        public virtual ObjectResult<spGetUsersAndRoles_Result> spGetUsersAndRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUsersAndRoles_Result>("spGetUsersAndRoles");
        }
    
        public virtual ObjectResult<spGetUsersByRole_Result> spGetUsersByRole(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUsersByRole_Result>("spGetUsersByRole", roleIdParameter);
        }
    
        public virtual ObjectResult<spGetUsersForRole_Result> spGetUsersForRole(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUsersForRole_Result>("spGetUsersForRole", roleIdParameter);
        }
    
        public virtual int spISUserInFunction(string userID, Nullable<int> functionID, ObjectParameter result)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var functionIDParameter = functionID.HasValue ?
                new ObjectParameter("FunctionID", functionID) :
                new ObjectParameter("FunctionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spISUserInFunction", userIDParameter, functionIDParameter, result);
        }
    
        public virtual ObjectResult<spJobInfo1_Result> spJobInfo1(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJobInfo1_Result>("spJobInfo1", projIDParameter);
        }
    
        public virtual ObjectResult<spJobInfo2_Result> spJobInfo2(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJobInfo2_Result>("spJobInfo2", siteIDParameter);
        }
    
        public virtual int spLastSelection(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLastSelection", userIDParameter);
        }
    
        public virtual ObjectResult<spMasterReplicationUNC_Result> spMasterReplicationUNC()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMasterReplicationUNC_Result>("spMasterReplicationUNC");
        }
    
        public virtual int spMoveAppConfigAction(Nullable<int> appID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<int> direction, Nullable<int> movetype)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(int));
    
            var movetypeParameter = movetype.HasValue ?
                new ObjectParameter("Movetype", movetype) :
                new ObjectParameter("Movetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMoveAppConfigAction", appIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, directionParameter, movetypeParameter);
        }
    
        public virtual int spMoveAppGroupConfigAction(Nullable<int> appGroupID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<int> direction, Nullable<int> movetype)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(int));
    
            var movetypeParameter = movetype.HasValue ?
                new ObjectParameter("Movetype", movetype) :
                new ObjectParameter("Movetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMoveAppGroupConfigAction", appGroupIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, directionParameter, movetypeParameter);
        }
    
        public virtual int spMoveAppGroupSiteConfigAction(Nullable<int> appGroupID, Nullable<int> siteID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<int> direction, Nullable<int> movetype)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(int));
    
            var movetypeParameter = movetype.HasValue ?
                new ObjectParameter("Movetype", movetype) :
                new ObjectParameter("Movetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMoveAppGroupSiteConfigAction", appGroupIDParameter, siteIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, directionParameter, movetypeParameter);
        }
    
        public virtual int spMoveAppSetAssignment(Nullable<int> appID, Nullable<int> seqNum, Nullable<int> direction)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMoveAppSetAssignment", appIDParameter, seqNumParameter, directionParameter);
        }
    
        public virtual int spMoveAppSiteConfigAction(Nullable<int> appID, Nullable<int> siteID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<int> direction, Nullable<int> movetype)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(int));
    
            var movetypeParameter = movetype.HasValue ?
                new ObjectParameter("Movetype", movetype) :
                new ObjectParameter("Movetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMoveAppSiteConfigAction", appIDParameter, siteIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, directionParameter, movetypeParameter);
        }
    
        public virtual int spMoveGBUConfigAction(Nullable<int> gBUID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<int> direction, Nullable<int> movetype)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(int));
    
            var movetypeParameter = movetype.HasValue ?
                new ObjectParameter("Movetype", movetype) :
                new ObjectParameter("Movetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMoveGBUConfigAction", gBUIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, directionParameter, movetypeParameter);
        }
    
        public virtual int spMoveGBUConfigActionOrig(Nullable<int> gBUID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<int> direction)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMoveGBUConfigActionOrig", gBUIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, directionParameter);
        }
    
        public virtual int spMoveProjConfigAction(Nullable<int> projID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<int> direction, Nullable<int> movetype)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(int));
    
            var movetypeParameter = movetype.HasValue ?
                new ObjectParameter("Movetype", movetype) :
                new ObjectParameter("Movetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMoveProjConfigAction", projIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, directionParameter, movetypeParameter);
        }
    
        public virtual int spMoveSiteConfigAction(Nullable<int> siteID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<int> direction, Nullable<int> movetype)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(int));
    
            var movetypeParameter = movetype.HasValue ?
                new ObjectParameter("Movetype", movetype) :
                new ObjectParameter("Movetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMoveSiteConfigAction", siteIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, directionParameter, movetypeParameter);
        }
    
        public virtual int spMoveSystemConfigAction(Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<int> direction, Nullable<int> movetype)
        {
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(int));
    
            var movetypeParameter = movetype.HasValue ?
                new ObjectParameter("Movetype", movetype) :
                new ObjectParameter("Movetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMoveSystemConfigAction", seqNumParameter, subSeqNumParameter, execTypeParameter, directionParameter, movetypeParameter);
        }
    
        public virtual int spNumWrkStn(string siteName)
        {
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNumWrkStn", siteNameParameter);
        }
    
        public virtual int spNumWrkStnByPeriod(string siteName, Nullable<System.DateTime> startPeriod, Nullable<System.DateTime> endPeriod)
        {
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var startPeriodParameter = startPeriod.HasValue ?
                new ObjectParameter("StartPeriod", startPeriod) :
                new ObjectParameter("StartPeriod", typeof(System.DateTime));
    
            var endPeriodParameter = endPeriod.HasValue ?
                new ObjectParameter("EndPeriod", endPeriod) :
                new ObjectParameter("EndPeriod", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNumWrkStnByPeriod", siteNameParameter, startPeriodParameter, endPeriodParameter);
        }
    
        public virtual ObjectResult<spProjConfigActions_Result> spProjConfigActions(Nullable<int> projID, string execType)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProjConfigActions_Result>("spProjConfigActions", projIDParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<spProjectInfo_Result> spProjectInfo(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProjectInfo_Result>("spProjectInfo", projIDParameter);
        }
    
        public virtual ObjectResult<spProjectInfoValues_Result> spProjectInfoValues(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProjectInfoValues_Result>("spProjectInfoValues", projIDParameter);
        }
    
        public virtual ObjectResult<spProjects_Result> spProjects(Nullable<int> projID, Nullable<int> siteID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProjects_Result>("spProjects", projIDParameter, siteIDParameter);
        }
    
        public virtual ObjectResult<spProjects2_Result> spProjects2(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProjects2_Result>("spProjects2", siteIDParameter);
        }
    
        public virtual ObjectResult<spProjects3_Result> spProjects3(Nullable<int> projID, Nullable<int> siteID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProjects3_Result>("spProjects3", projIDParameter, siteIDParameter);
        }
    
        public virtual ObjectResult<spProjReplicationGetSitesForProject_Result> spProjReplicationGetSitesForProject(Nullable<int> siteID, Nullable<int> projID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProjReplicationGetSitesForProject_Result>("spProjReplicationGetSitesForProject", siteIDParameter, projIDParameter);
        }
    
        public virtual ObjectResult<spProjReplicationGetSourceDiscInfo_Result> spProjReplicationGetSourceDiscInfo(Nullable<int> discID)
        {
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProjReplicationGetSourceDiscInfo_Result>("spProjReplicationGetSourceDiscInfo", discIDParameter);
        }
    
        public virtual ObjectResult<spProjReplicationGetSourceIds_Result> spProjReplicationGetSourceIds()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProjReplicationGetSourceIds_Result>("spProjReplicationGetSourceIds");
        }
    
        public virtual ObjectResult<spProjReplicationGetSourceProjInfo_Result> spProjReplicationGetSourceProjInfo(Nullable<int> siteID, Nullable<int> projID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProjReplicationGetSourceProjInfo_Result>("spProjReplicationGetSourceProjInfo", siteIDParameter, projIDParameter);
        }
    
        public virtual ObjectResult<spProjReplicationGetSourceSubpInfo_Result> spProjReplicationGetSourceSubpInfo(Nullable<int> subpID)
        {
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProjReplicationGetSourceSubpInfo_Result>("spProjReplicationGetSourceSubpInfo", subpIDParameter);
        }
    
        public virtual int spProjReplicationValidateSources()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProjReplicationValidateSources");
        }
    
        public virtual ObjectResult<spProjSiteInfo_Result> spProjSiteInfo(Nullable<int> siteID, Nullable<int> projID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProjSiteInfo_Result>("spProjSiteInfo", siteIDParameter, projIDParameter);
        }
    
        public virtual ObjectResult<spProjSysParameters_Result> spProjSysParameters(Nullable<int> projID, string parameterName)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProjSysParameters_Result>("spProjSysParameters", projIDParameter, parameterNameParameter);
        }
    
        public virtual int spRemoveRolesFromFunctions(Nullable<int> functionID, Nullable<int> roleID, Nullable<int> entityID, string entityType)
        {
            var functionIDParameter = functionID.HasValue ?
                new ObjectParameter("FunctionID", functionID) :
                new ObjectParameter("FunctionID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            var entityTypeParameter = entityType != null ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRemoveRolesFromFunctions", functionIDParameter, roleIDParameter, entityIDParameter, entityTypeParameter);
        }
    
        public virtual int spRemoveUserFromRole(string userID, Nullable<int> roleID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRemoveUserFromRole", userIDParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<spRunOnce_Result> spRunOnce(string aCTION, string userID, string workStation, string command)
        {
            var aCTIONParameter = aCTION != null ?
                new ObjectParameter("ACTION", aCTION) :
                new ObjectParameter("ACTION", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var workStationParameter = workStation != null ?
                new ObjectParameter("WorkStation", workStation) :
                new ObjectParameter("WorkStation", typeof(string));
    
            var commandParameter = command != null ?
                new ObjectParameter("Command", command) :
                new ObjectParameter("Command", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRunOnce_Result>("spRunOnce", aCTIONParameter, userIDParameter, workStationParameter, commandParameter);
        }
    
        public virtual ObjectResult<spSiteConfigActions_Result> spSiteConfigActions(Nullable<int> siteID, string execType)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSiteConfigActions_Result>("spSiteConfigActions", siteIDParameter, execTypeParameter);
        }
    
        public virtual ObjectResult<spSiteInfoValues_Result> spSiteInfoValues(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSiteInfoValues_Result>("spSiteInfoValues", siteIDParameter);
        }
    
        public virtual ObjectResult<spSites_Result> spSites(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSites_Result>("spSites", siteIDParameter);
        }
    
        public virtual ObjectResult<spSitesForReplication_Result> spSitesForReplication(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSitesForReplication_Result>("spSitesForReplication", siteIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spSoftwarePublisherNameExist(string softwarePublisherName)
        {
            var softwarePublisherNameParameter = softwarePublisherName != null ?
                new ObjectParameter("SoftwarePublisherName", softwarePublisherName) :
                new ObjectParameter("SoftwarePublisherName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSoftwarePublisherNameExist", softwarePublisherNameParameter);
        }
    
        public virtual ObjectResult<spSubprojects_Result> spSubprojects(Nullable<int> subpID, Nullable<int> projID)
        {
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSubprojects_Result>("spSubprojects", subpIDParameter, projIDParameter);
        }
    
        public virtual ObjectResult<spSubprojects2_Result> spSubprojects2(Nullable<int> projID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSubprojects2_Result>("spSubprojects2", projIDParameter);
        }
    
        public virtual ObjectResult<spSubprojectsInfo_Result> spSubprojectsInfo(Nullable<int> projID, Nullable<int> subpID)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSubprojectsInfo_Result>("spSubprojectsInfo", projIDParameter, subpIDParameter);
        }
    
        public virtual ObjectResult<spSystemConfigActions_Result> spSystemConfigActions(string execType)
        {
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSystemConfigActions_Result>("spSystemConfigActions", execTypeParameter);
        }
    
        public virtual ObjectResult<spSystemParameters_Result> spSystemParameters(string parameterName)
        {
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSystemParameters_Result>("spSystemParameters", parameterNameParameter);
        }
    
        public virtual int spTestUsage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTestUsage");
        }
    
        public virtual int spUpdateAppConfigActions(Nullable<int> appID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAppConfigActions", appIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spUpdateAppGroupConfigAction(Nullable<int> appGroupID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAppGroupConfigAction", appGroupIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spUpdateAppGroupInfoValues(Nullable<int> appGroupID, string appGroupInfoName, string appGroupInfoValue, string appGroupInfoDescription, string comment, string appGroupInfoNameNew)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var appGroupInfoNameParameter = appGroupInfoName != null ?
                new ObjectParameter("AppGroupInfoName", appGroupInfoName) :
                new ObjectParameter("AppGroupInfoName", typeof(string));
    
            var appGroupInfoValueParameter = appGroupInfoValue != null ?
                new ObjectParameter("AppGroupInfoValue", appGroupInfoValue) :
                new ObjectParameter("AppGroupInfoValue", typeof(string));
    
            var appGroupInfoDescriptionParameter = appGroupInfoDescription != null ?
                new ObjectParameter("AppGroupInfoDescription", appGroupInfoDescription) :
                new ObjectParameter("AppGroupInfoDescription", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var appGroupInfoNameNewParameter = appGroupInfoNameNew != null ?
                new ObjectParameter("AppGroupInfoNameNew", appGroupInfoNameNew) :
                new ObjectParameter("AppGroupInfoNameNew", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAppGroupInfoValues", appGroupIDParameter, appGroupInfoNameParameter, appGroupInfoValueParameter, appGroupInfoDescriptionParameter, commentParameter, appGroupInfoNameNewParameter);
        }
    
        public virtual int spUpdateAppGroupSiteConfigAction(Nullable<int> appGroupID, Nullable<int> siteID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var appGroupIDParameter = appGroupID.HasValue ?
                new ObjectParameter("AppGroupID", appGroupID) :
                new ObjectParameter("AppGroupID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAppGroupSiteConfigAction", appGroupIDParameter, siteIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spUpdateAppInfoValues(Nullable<int> appID, string appInfoName, string appInfoValue, string appInfoDescription, string comment, string appInfoNameNew)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var appInfoNameParameter = appInfoName != null ?
                new ObjectParameter("AppInfoName", appInfoName) :
                new ObjectParameter("AppInfoName", typeof(string));
    
            var appInfoValueParameter = appInfoValue != null ?
                new ObjectParameter("AppInfoValue", appInfoValue) :
                new ObjectParameter("AppInfoValue", typeof(string));
    
            var appInfoDescriptionParameter = appInfoDescription != null ?
                new ObjectParameter("AppInfoDescription", appInfoDescription) :
                new ObjectParameter("AppInfoDescription", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var appInfoNameNewParameter = appInfoNameNew != null ?
                new ObjectParameter("AppInfoNameNew", appInfoNameNew) :
                new ObjectParameter("AppInfoNameNew", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAppInfoValues", appIDParameter, appInfoNameParameter, appInfoValueParameter, appInfoDescriptionParameter, commentParameter, appInfoNameNewParameter);
        }
    
        public virtual int spUpdateApplicationGroups(Nullable<int> appGroupId, string appGroupAbbr, string appGroupName, string appGroupDescription, string comment)
        {
            var appGroupIdParameter = appGroupId.HasValue ?
                new ObjectParameter("AppGroupId", appGroupId) :
                new ObjectParameter("AppGroupId", typeof(int));
    
            var appGroupAbbrParameter = appGroupAbbr != null ?
                new ObjectParameter("AppGroupAbbr", appGroupAbbr) :
                new ObjectParameter("AppGroupAbbr", typeof(string));
    
            var appGroupNameParameter = appGroupName != null ?
                new ObjectParameter("AppGroupName", appGroupName) :
                new ObjectParameter("AppGroupName", typeof(string));
    
            var appGroupDescriptionParameter = appGroupDescription != null ?
                new ObjectParameter("AppGroupDescription", appGroupDescription) :
                new ObjectParameter("AppGroupDescription", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateApplicationGroups", appGroupIdParameter, appGroupAbbrParameter, appGroupNameParameter, appGroupDescriptionParameter, commentParameter);
        }
    
        public virtual int spUpdateApplications(Nullable<int> appId, string appAbbr, string appName, string appDescription, string appInvocation, string altAppInvocation, string appArgs, string appToMonitor, string appWorkingDir, string appVersion, Nullable<int> appType, Nullable<int> accountingLevel, Nullable<int> softwarePublisherID, string comment)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            var appAbbrParameter = appAbbr != null ?
                new ObjectParameter("AppAbbr", appAbbr) :
                new ObjectParameter("AppAbbr", typeof(string));
    
            var appNameParameter = appName != null ?
                new ObjectParameter("AppName", appName) :
                new ObjectParameter("AppName", typeof(string));
    
            var appDescriptionParameter = appDescription != null ?
                new ObjectParameter("AppDescription", appDescription) :
                new ObjectParameter("AppDescription", typeof(string));
    
            var appInvocationParameter = appInvocation != null ?
                new ObjectParameter("AppInvocation", appInvocation) :
                new ObjectParameter("AppInvocation", typeof(string));
    
            var altAppInvocationParameter = altAppInvocation != null ?
                new ObjectParameter("AltAppInvocation", altAppInvocation) :
                new ObjectParameter("AltAppInvocation", typeof(string));
    
            var appArgsParameter = appArgs != null ?
                new ObjectParameter("AppArgs", appArgs) :
                new ObjectParameter("AppArgs", typeof(string));
    
            var appToMonitorParameter = appToMonitor != null ?
                new ObjectParameter("AppToMonitor", appToMonitor) :
                new ObjectParameter("AppToMonitor", typeof(string));
    
            var appWorkingDirParameter = appWorkingDir != null ?
                new ObjectParameter("AppWorkingDir", appWorkingDir) :
                new ObjectParameter("AppWorkingDir", typeof(string));
    
            var appVersionParameter = appVersion != null ?
                new ObjectParameter("AppVersion", appVersion) :
                new ObjectParameter("AppVersion", typeof(string));
    
            var appTypeParameter = appType.HasValue ?
                new ObjectParameter("AppType", appType) :
                new ObjectParameter("AppType", typeof(int));
    
            var accountingLevelParameter = accountingLevel.HasValue ?
                new ObjectParameter("AccountingLevel", accountingLevel) :
                new ObjectParameter("AccountingLevel", typeof(int));
    
            var softwarePublisherIDParameter = softwarePublisherID.HasValue ?
                new ObjectParameter("SoftwarePublisherID", softwarePublisherID) :
                new ObjectParameter("SoftwarePublisherID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateApplications", appIdParameter, appAbbrParameter, appNameParameter, appDescriptionParameter, appInvocationParameter, altAppInvocationParameter, appArgsParameter, appToMonitorParameter, appWorkingDirParameter, appVersionParameter, appTypeParameter, accountingLevelParameter, softwarePublisherIDParameter, commentParameter);
        }
    
        public virtual int spUpdateAppset(Nullable<int> appsetId, string gUID, string appsetName)
        {
            var appsetIdParameter = appsetId.HasValue ?
                new ObjectParameter("AppsetId", appsetId) :
                new ObjectParameter("AppsetId", typeof(int));
    
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            var appsetNameParameter = appsetName != null ?
                new ObjectParameter("AppsetName", appsetName) :
                new ObjectParameter("AppsetName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAppset", appsetIdParameter, gUIDParameter, appsetNameParameter);
        }
    
        public virtual int spUpdateAppSiteConfigAction(Nullable<int> appID, Nullable<int> siteID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAppSiteConfigAction", appIDParameter, siteIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spUpdateDiscipline(Nullable<int> discID, string discAbbr, string costCode, string discName, string discDescription, string discDirname)
        {
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            var discAbbrParameter = discAbbr != null ?
                new ObjectParameter("DiscAbbr", discAbbr) :
                new ObjectParameter("DiscAbbr", typeof(string));
    
            var costCodeParameter = costCode != null ?
                new ObjectParameter("CostCode", costCode) :
                new ObjectParameter("CostCode", typeof(string));
    
            var discNameParameter = discName != null ?
                new ObjectParameter("DiscName", discName) :
                new ObjectParameter("DiscName", typeof(string));
    
            var discDescriptionParameter = discDescription != null ?
                new ObjectParameter("DiscDescription", discDescription) :
                new ObjectParameter("DiscDescription", typeof(string));
    
            var discDirnameParameter = discDirname != null ?
                new ObjectParameter("DiscDirname", discDirname) :
                new ObjectParameter("DiscDirname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateDiscipline", discIDParameter, discAbbrParameter, costCodeParameter, discNameParameter, discDescriptionParameter, discDirnameParameter);
        }
    
        public virtual int spUpdateFunction(string description, string functionId)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var functionIdParameter = functionId != null ?
                new ObjectParameter("FunctionId", functionId) :
                new ObjectParameter("FunctionId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateFunction", descriptionParameter, functionIdParameter);
        }
    
        public virtual int spUpdateGBUConfigActions(Nullable<int> gBUID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateGBUConfigActions", gBUIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spUpdateGBUInfoValues(Nullable<int> gBUID, string gBUInfoName, string gBUInfoValue, string gBUInfoDescription, string comment, string gBUInfoNameNew)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var gBUInfoNameParameter = gBUInfoName != null ?
                new ObjectParameter("GBUInfoName", gBUInfoName) :
                new ObjectParameter("GBUInfoName", typeof(string));
    
            var gBUInfoValueParameter = gBUInfoValue != null ?
                new ObjectParameter("GBUInfoValue", gBUInfoValue) :
                new ObjectParameter("GBUInfoValue", typeof(string));
    
            var gBUInfoDescriptionParameter = gBUInfoDescription != null ?
                new ObjectParameter("GBUInfoDescription", gBUInfoDescription) :
                new ObjectParameter("GBUInfoDescription", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var gBUInfoNameNewParameter = gBUInfoNameNew != null ?
                new ObjectParameter("GBUInfoNameNew", gBUInfoNameNew) :
                new ObjectParameter("GBUInfoNameNew", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateGBUInfoValues", gBUIDParameter, gBUInfoNameParameter, gBUInfoValueParameter, gBUInfoDescriptionParameter, commentParameter, gBUInfoNameNewParameter);
        }
    
        public virtual int spUpdateGBUS(Nullable<int> gBUID, string gBUAbbr, string gBUName, string comment)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var gBUAbbrParameter = gBUAbbr != null ?
                new ObjectParameter("GBUAbbr", gBUAbbr) :
                new ObjectParameter("GBUAbbr", typeof(string));
    
            var gBUNameParameter = gBUName != null ?
                new ObjectParameter("GBUName", gBUName) :
                new ObjectParameter("GBUName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateGBUS", gBUIDParameter, gBUAbbrParameter, gBUNameParameter, commentParameter);
        }
    
        public virtual int spUpdateGBUSysParameters(Nullable<int> gBUID, string parameterName, string parameterValue, string description, string parameterNameNew)
        {
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            var parameterValueParameter = parameterValue != null ?
                new ObjectParameter("ParameterValue", parameterValue) :
                new ObjectParameter("ParameterValue", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var parameterNameNewParameter = parameterNameNew != null ?
                new ObjectParameter("ParameterNameNew", parameterNameNew) :
                new ObjectParameter("ParameterNameNew", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateGBUSysParameters", gBUIDParameter, parameterNameParameter, parameterValueParameter, descriptionParameter, parameterNameNewParameter);
        }
    
        public virtual int spUpdateProjConfigAction(Nullable<int> projID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateProjConfigAction", projIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spUpdateProject(Nullable<int> projId, string projAbbr, string projName, string projDescription, Nullable<int> gBUId, string comment)
        {
            var projIdParameter = projId.HasValue ?
                new ObjectParameter("ProjId", projId) :
                new ObjectParameter("ProjId", typeof(int));
    
            var projAbbrParameter = projAbbr != null ?
                new ObjectParameter("ProjAbbr", projAbbr) :
                new ObjectParameter("ProjAbbr", typeof(string));
    
            var projNameParameter = projName != null ?
                new ObjectParameter("ProjName", projName) :
                new ObjectParameter("ProjName", typeof(string));
    
            var projDescriptionParameter = projDescription != null ?
                new ObjectParameter("ProjDescription", projDescription) :
                new ObjectParameter("ProjDescription", typeof(string));
    
            var gBUIdParameter = gBUId.HasValue ?
                new ObjectParameter("GBUId", gBUId) :
                new ObjectParameter("GBUId", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateProject", projIdParameter, projAbbrParameter, projNameParameter, projDescriptionParameter, gBUIdParameter, commentParameter);
        }
    
        public virtual int spUpdateProjectInfoValues(Nullable<int> projID, string projInfoName, string projInfoValue, string projInfoDescription, string comment, string projInfoNameNew)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var projInfoNameParameter = projInfoName != null ?
                new ObjectParameter("ProjInfoName", projInfoName) :
                new ObjectParameter("ProjInfoName", typeof(string));
    
            var projInfoValueParameter = projInfoValue != null ?
                new ObjectParameter("ProjInfoValue", projInfoValue) :
                new ObjectParameter("ProjInfoValue", typeof(string));
    
            var projInfoDescriptionParameter = projInfoDescription != null ?
                new ObjectParameter("ProjInfoDescription", projInfoDescription) :
                new ObjectParameter("ProjInfoDescription", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var projInfoNameNewParameter = projInfoNameNew != null ?
                new ObjectParameter("ProjInfoNameNew", projInfoNameNew) :
                new ObjectParameter("ProjInfoNameNew", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateProjectInfoValues", projIDParameter, projInfoNameParameter, projInfoValueParameter, projInfoDescriptionParameter, commentParameter, projInfoNameNewParameter);
        }
    
        public virtual int spUpdateProjectJobWBS(Nullable<int> iD, string job, string wBS, string jobDescription)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var wBSParameter = wBS != null ?
                new ObjectParameter("WBS", wBS) :
                new ObjectParameter("WBS", typeof(string));
    
            var jobDescriptionParameter = jobDescription != null ?
                new ObjectParameter("JobDescription", jobDescription) :
                new ObjectParameter("JobDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateProjectJobWBS", iDParameter, jobParameter, wBSParameter, jobDescriptionParameter);
        }
    
        public virtual int spUpdateProjSiteAssignment(Nullable<int> projID, Nullable<int> siteID, string projDirname, string projDrive, string servername, string sharename, Nullable<bool> sharedAtProjDir, Nullable<int> cmpyStdID, string cmpyStdDrive, string projLinkPath, string projGEDir)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var projDirnameParameter = projDirname != null ?
                new ObjectParameter("ProjDirname", projDirname) :
                new ObjectParameter("ProjDirname", typeof(string));
    
            var projDriveParameter = projDrive != null ?
                new ObjectParameter("ProjDrive", projDrive) :
                new ObjectParameter("ProjDrive", typeof(string));
    
            var servernameParameter = servername != null ?
                new ObjectParameter("Servername", servername) :
                new ObjectParameter("Servername", typeof(string));
    
            var sharenameParameter = sharename != null ?
                new ObjectParameter("Sharename", sharename) :
                new ObjectParameter("Sharename", typeof(string));
    
            var sharedAtProjDirParameter = sharedAtProjDir.HasValue ?
                new ObjectParameter("SharedAtProjDir", sharedAtProjDir) :
                new ObjectParameter("SharedAtProjDir", typeof(bool));
    
            var cmpyStdIDParameter = cmpyStdID.HasValue ?
                new ObjectParameter("CmpyStdID", cmpyStdID) :
                new ObjectParameter("CmpyStdID", typeof(int));
    
            var cmpyStdDriveParameter = cmpyStdDrive != null ?
                new ObjectParameter("CmpyStdDrive", cmpyStdDrive) :
                new ObjectParameter("CmpyStdDrive", typeof(string));
    
            var projLinkPathParameter = projLinkPath != null ?
                new ObjectParameter("ProjLinkPath", projLinkPath) :
                new ObjectParameter("ProjLinkPath", typeof(string));
    
            var projGEDirParameter = projGEDir != null ?
                new ObjectParameter("ProjGEDir", projGEDir) :
                new ObjectParameter("ProjGEDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateProjSiteAssignment", projIDParameter, siteIDParameter, projDirnameParameter, projDriveParameter, servernameParameter, sharenameParameter, sharedAtProjDirParameter, cmpyStdIDParameter, cmpyStdDriveParameter, projLinkPathParameter, projGEDirParameter);
        }
    
        public virtual int spUpdateProjSysParameters(Nullable<int> projID, string parameterName, string parameterValue, string description, string parameterNameNew)
        {
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            var parameterValueParameter = parameterValue != null ?
                new ObjectParameter("ParameterValue", parameterValue) :
                new ObjectParameter("ParameterValue", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var parameterNameNewParameter = parameterNameNew != null ?
                new ObjectParameter("ParameterNameNew", parameterNameNew) :
                new ObjectParameter("ParameterNameNew", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateProjSysParameters", projIDParameter, parameterNameParameter, parameterValueParameter, descriptionParameter, parameterNameNewParameter);
        }
    
        public virtual int spUpdateRole(string description, string roleId)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var roleIdParameter = roleId != null ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateRole", descriptionParameter, roleIdParameter);
        }
    
        public virtual int spUpdateSiteConfigAction(Nullable<int> siteID, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSiteConfigAction", siteIDParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spUpdateSiteInfoValues(Nullable<int> siteID, string siteInfoName, string siteInfoValue, string siteInfoDescription, string comment, string siteInfoNameNew)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var siteInfoNameParameter = siteInfoName != null ?
                new ObjectParameter("SiteInfoName", siteInfoName) :
                new ObjectParameter("SiteInfoName", typeof(string));
    
            var siteInfoValueParameter = siteInfoValue != null ?
                new ObjectParameter("SiteInfoValue", siteInfoValue) :
                new ObjectParameter("SiteInfoValue", typeof(string));
    
            var siteInfoDescriptionParameter = siteInfoDescription != null ?
                new ObjectParameter("SiteInfoDescription", siteInfoDescription) :
                new ObjectParameter("SiteInfoDescription", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var siteInfoNameNewParameter = siteInfoNameNew != null ?
                new ObjectParameter("SiteInfoNameNew", siteInfoNameNew) :
                new ObjectParameter("SiteInfoNameNew", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSiteInfoValues", siteIDParameter, siteInfoNameParameter, siteInfoValueParameter, siteInfoDescriptionParameter, commentParameter, siteInfoNameNewParameter);
        }
    
        public virtual int spUpdateSiteJobWBS(Nullable<int> iD, string job, string wBS, string jobDescription)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var wBSParameter = wBS != null ?
                new ObjectParameter("WBS", wBS) :
                new ObjectParameter("WBS", typeof(string));
    
            var jobDescriptionParameter = jobDescription != null ?
                new ObjectParameter("JobDescription", jobDescription) :
                new ObjectParameter("JobDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSiteJobWBS", iDParameter, jobParameter, wBSParameter, jobDescriptionParameter);
        }
    
        public virtual int spUpdateSites(Nullable<int> siteId, string siteAbbr, string siteName, string siteDescription, string edeDrive, string edeFileServername, string edeFileServerSharename, Nullable<int> gBUID, string comment)
        {
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            var siteAbbrParameter = siteAbbr != null ?
                new ObjectParameter("SiteAbbr", siteAbbr) :
                new ObjectParameter("SiteAbbr", typeof(string));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));
    
            var siteDescriptionParameter = siteDescription != null ?
                new ObjectParameter("SiteDescription", siteDescription) :
                new ObjectParameter("SiteDescription", typeof(string));
    
            var edeDriveParameter = edeDrive != null ?
                new ObjectParameter("EdeDrive", edeDrive) :
                new ObjectParameter("EdeDrive", typeof(string));
    
            var edeFileServernameParameter = edeFileServername != null ?
                new ObjectParameter("EdeFileServername", edeFileServername) :
                new ObjectParameter("EdeFileServername", typeof(string));
    
            var edeFileServerSharenameParameter = edeFileServerSharename != null ?
                new ObjectParameter("EdeFileServerSharename", edeFileServerSharename) :
                new ObjectParameter("EdeFileServerSharename", typeof(string));
    
            var gBUIDParameter = gBUID.HasValue ?
                new ObjectParameter("GBUID", gBUID) :
                new ObjectParameter("GBUID", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSites", siteIdParameter, siteAbbrParameter, siteNameParameter, siteDescriptionParameter, edeDriveParameter, edeFileServernameParameter, edeFileServerSharenameParameter, gBUIDParameter, commentParameter);
        }
    
        public virtual int spUpdateSoftwarePublisher(Nullable<int> softwarePublisherID, string softwarePublisherName, string comment)
        {
            var softwarePublisherIDParameter = softwarePublisherID.HasValue ?
                new ObjectParameter("SoftwarePublisherID", softwarePublisherID) :
                new ObjectParameter("SoftwarePublisherID", typeof(int));
    
            var softwarePublisherNameParameter = softwarePublisherName != null ?
                new ObjectParameter("SoftwarePublisherName", softwarePublisherName) :
                new ObjectParameter("SoftwarePublisherName", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSoftwarePublisher", softwarePublisherIDParameter, softwarePublisherNameParameter, commentParameter);
        }
    
        public virtual int spUpdateSubProject(Nullable<int> id, string abbr, string name, string description, string dirName, string parentId, string linkPath, string comment)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var abbrParameter = abbr != null ?
                new ObjectParameter("Abbr", abbr) :
                new ObjectParameter("Abbr", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dirNameParameter = dirName != null ?
                new ObjectParameter("DirName", dirName) :
                new ObjectParameter("DirName", typeof(string));
    
            var parentIdParameter = parentId != null ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(string));
    
            var linkPathParameter = linkPath != null ?
                new ObjectParameter("LinkPath", linkPath) :
                new ObjectParameter("LinkPath", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSubProject", idParameter, abbrParameter, nameParameter, descriptionParameter, dirNameParameter, parentIdParameter, linkPathParameter, commentParameter);
        }
    
        public virtual int spUpdateSystemConfigActions(string parameterName, Nullable<int> seqNum, Nullable<int> subSeqNum, string execType, Nullable<bool> wait, Nullable<bool> haltOnError, string commandStr, string arg1, string arg2, string comment)
        {
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            var seqNumParameter = seqNum.HasValue ?
                new ObjectParameter("SeqNum", seqNum) :
                new ObjectParameter("SeqNum", typeof(int));
    
            var subSeqNumParameter = subSeqNum.HasValue ?
                new ObjectParameter("SubSeqNum", subSeqNum) :
                new ObjectParameter("SubSeqNum", typeof(int));
    
            var execTypeParameter = execType != null ?
                new ObjectParameter("ExecType", execType) :
                new ObjectParameter("ExecType", typeof(string));
    
            var waitParameter = wait.HasValue ?
                new ObjectParameter("Wait", wait) :
                new ObjectParameter("Wait", typeof(bool));
    
            var haltOnErrorParameter = haltOnError.HasValue ?
                new ObjectParameter("HaltOnError", haltOnError) :
                new ObjectParameter("HaltOnError", typeof(bool));
    
            var commandStrParameter = commandStr != null ?
                new ObjectParameter("CommandStr", commandStr) :
                new ObjectParameter("CommandStr", typeof(string));
    
            var arg1Parameter = arg1 != null ?
                new ObjectParameter("Arg1", arg1) :
                new ObjectParameter("Arg1", typeof(string));
    
            var arg2Parameter = arg2 != null ?
                new ObjectParameter("Arg2", arg2) :
                new ObjectParameter("Arg2", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSystemConfigActions", parameterNameParameter, seqNumParameter, subSeqNumParameter, execTypeParameter, waitParameter, haltOnErrorParameter, commandStrParameter, arg1Parameter, arg2Parameter, commentParameter);
        }
    
        public virtual int spUpdateSystemInfoValues(string systemInfoName, string systemInfoValue, string systemInfoDescription, string comment, string systemInfoNameNew)
        {
            var systemInfoNameParameter = systemInfoName != null ?
                new ObjectParameter("SystemInfoName", systemInfoName) :
                new ObjectParameter("SystemInfoName", typeof(string));
    
            var systemInfoValueParameter = systemInfoValue != null ?
                new ObjectParameter("SystemInfoValue", systemInfoValue) :
                new ObjectParameter("SystemInfoValue", typeof(string));
    
            var systemInfoDescriptionParameter = systemInfoDescription != null ?
                new ObjectParameter("SystemInfoDescription", systemInfoDescription) :
                new ObjectParameter("SystemInfoDescription", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var systemInfoNameNewParameter = systemInfoNameNew != null ?
                new ObjectParameter("SystemInfoNameNew", systemInfoNameNew) :
                new ObjectParameter("SystemInfoNameNew", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSystemInfoValues", systemInfoNameParameter, systemInfoValueParameter, systemInfoDescriptionParameter, commentParameter, systemInfoNameNewParameter);
        }
    
        public virtual int spUpdateSystemParameters(string parameterName, string parameterValue, string description, string parameterNameNew)
        {
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("ParameterName", parameterName) :
                new ObjectParameter("ParameterName", typeof(string));
    
            var parameterValueParameter = parameterValue != null ?
                new ObjectParameter("ParameterValue", parameterValue) :
                new ObjectParameter("ParameterValue", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var parameterNameNewParameter = parameterNameNew != null ?
                new ObjectParameter("ParameterNameNew", parameterNameNew) :
                new ObjectParameter("ParameterNameNew", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSystemParameters", parameterNameParameter, parameterValueParameter, descriptionParameter, parameterNameNewParameter);
        }
    
        public virtual int spUpdateUser(string userName, string userId)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateUser", userNameParameter, userIdParameter);
        }
    
        public virtual int spUserHistory(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserHistory", userIDParameter);
        }
    
        public virtual int spUserHistoryInsert(string userID, string job, string wBS, string costCode, Nullable<int> accountingLevel, Nullable<int> siteID, Nullable<int> projID, Nullable<int> subpID, Nullable<int> discID, Nullable<int> appID, string entryTime)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var wBSParameter = wBS != null ?
                new ObjectParameter("WBS", wBS) :
                new ObjectParameter("WBS", typeof(string));
    
            var costCodeParameter = costCode != null ?
                new ObjectParameter("CostCode", costCode) :
                new ObjectParameter("CostCode", typeof(string));
    
            var accountingLevelParameter = accountingLevel.HasValue ?
                new ObjectParameter("AccountingLevel", accountingLevel) :
                new ObjectParameter("AccountingLevel", typeof(int));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var entryTimeParameter = entryTime != null ?
                new ObjectParameter("EntryTime", entryTime) :
                new ObjectParameter("EntryTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserHistoryInsert", userIDParameter, jobParameter, wBSParameter, costCodeParameter, accountingLevelParameter, siteIDParameter, projIDParameter, subpIDParameter, discIDParameter, appIDParameter, entryTimeParameter);
        }
    
        public virtual ObjectResult<spUserHistoryNet_Result> spUserHistoryNet(string option, string userID, Nullable<int> siteID, Nullable<int> projID, Nullable<int> subpID, Nullable<int> discID, Nullable<int> appID, string job, string wBS, string entryTime, string workstation, string server)
        {
            var optionParameter = option != null ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            var jobParameter = job != null ?
                new ObjectParameter("Job", job) :
                new ObjectParameter("Job", typeof(string));
    
            var wBSParameter = wBS != null ?
                new ObjectParameter("WBS", wBS) :
                new ObjectParameter("WBS", typeof(string));
    
            var entryTimeParameter = entryTime != null ?
                new ObjectParameter("EntryTime", entryTime) :
                new ObjectParameter("EntryTime", typeof(string));
    
            var workstationParameter = workstation != null ?
                new ObjectParameter("Workstation", workstation) :
                new ObjectParameter("Workstation", typeof(string));
    
            var serverParameter = server != null ?
                new ObjectParameter("Server", server) :
                new ObjectParameter("Server", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserHistoryNet_Result>("spUserHistoryNet", optionParameter, userIDParameter, siteIDParameter, projIDParameter, subpIDParameter, discIDParameter, appIDParameter, jobParameter, wBSParameter, entryTimeParameter, workstationParameter, serverParameter);
        }
    
        public virtual int spUserHistorySetExitTime(string userID, Nullable<int> siteID, Nullable<int> projID, Nullable<int> subpID, Nullable<int> discID, Nullable<int> appID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            var subpIDParameter = subpID.HasValue ?
                new ObjectParameter("SubpID", subpID) :
                new ObjectParameter("SubpID", typeof(int));
    
            var discIDParameter = discID.HasValue ?
                new ObjectParameter("DiscID", discID) :
                new ObjectParameter("DiscID", typeof(int));
    
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserHistorySetExitTime", userIDParameter, siteIDParameter, projIDParameter, subpIDParameter, discIDParameter, appIDParameter);
        }
    
        public virtual int spUserUsageByWeek(Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<int> projID)
        {
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserUsageByWeek", startTimeParameter, endTimeParameter, projIDParameter);
        }
    
        public virtual int spViewUserHistory(string runOpt, string para1, string para2)
        {
            var runOptParameter = runOpt != null ?
                new ObjectParameter("RunOpt", runOpt) :
                new ObjectParameter("RunOpt", typeof(string));
    
            var para1Parameter = para1 != null ?
                new ObjectParameter("Para1", para1) :
                new ObjectParameter("Para1", typeof(string));
    
            var para2Parameter = para2 != null ?
                new ObjectParameter("Para2", para2) :
                new ObjectParameter("Para2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spViewUserHistory", runOptParameter, para1Parameter, para2Parameter);
        }
    
        public virtual ObjectResult<spViewUserHistoryNet_Result> spViewUserHistoryNet(string runOpt, string para1, string para2)
        {
            var runOptParameter = runOpt != null ?
                new ObjectParameter("RunOpt", runOpt) :
                new ObjectParameter("RunOpt", typeof(string));
    
            var para1Parameter = para1 != null ?
                new ObjectParameter("Para1", para1) :
                new ObjectParameter("Para1", typeof(string));
    
            var para2Parameter = para2 != null ?
                new ObjectParameter("Para2", para2) :
                new ObjectParameter("Para2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spViewUserHistoryNet_Result>("spViewUserHistoryNet", runOptParameter, para1Parameter, para2Parameter);
        }
    
        public virtual int spWorkStnUsageByWeek(Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<int> projID)
        {
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var projIDParameter = projID.HasValue ?
                new ObjectParameter("ProjID", projID) :
                new ObjectParameter("ProjID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spWorkStnUsageByWeek", startTimeParameter, endTimeParameter, projIDParameter);
        }
    
        public virtual int spWrkStnPeriodUsage(Nullable<System.DateTime> startPeriod, Nullable<System.DateTime> endPeriod)
        {
            var startPeriodParameter = startPeriod.HasValue ?
                new ObjectParameter("StartPeriod", startPeriod) :
                new ObjectParameter("StartPeriod", typeof(System.DateTime));
    
            var endPeriodParameter = endPeriod.HasValue ?
                new ObjectParameter("EndPeriod", endPeriod) :
                new ObjectParameter("EndPeriod", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spWrkStnPeriodUsage", startPeriodParameter, endPeriodParameter);
        }
    
        public virtual int spWrkStnUsage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spWrkStnUsage");
        }
    }
}
